/**
 *
 * $Id$
 */
package de.uni_stuttgart.iste.cowolf.model.LqnCore.validation;

import de.uni_stuttgart.iste.cowolf.model.LqnCore.EntryActivityGraph;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.EntryMakingCallType;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.OutputEntryDistributionType;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.OutputResultType;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.PhaseActivities;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.SemaphoreType;
import de.uni_stuttgart.iste.cowolf.model.LqnCore.TypeType;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link de.uni_stuttgart.iste.cowolf.model.LqnCore.EntryType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface EntryTypeValidator {
	boolean validate();

	boolean validateResultEntry(EList<OutputResultType> value);
	boolean validateServiceTimeDistribution(EList<OutputEntryDistributionType> value);
	boolean validateForwarding(EList<EntryMakingCallType> value);
	boolean validateEntryActivityGraph(EntryActivityGraph value);
	boolean validateEntryPhaseActivities(PhaseActivities value);
	boolean validateName(String value);
	boolean validateOpenArrivalRate(Object value);
	boolean validatePriority(int value);
	boolean validateSemaphore(SemaphoreType value);
	boolean validateType(TypeType value);
}
