<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" name="statechart" version="8.1.0">
  <ownedViewpoints name="statechart" modelFileExtension="statemachine">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="statechart diagram" domainClass="statechart.StateMachineRoot" enablePopupBars="true">
      <layout xsi:type="description_1:CompositeLayout" padding="50" direction="LeftToRight"/>
      <defaultLayer name="Default">
        <edgeMappings name="StateToStateTransitionEdge" sourceMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='StateContainer'] //@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']" targetMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer'] //@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='StateContainer']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="statechart.Transition" useDomainElement="true">
          <conditionnalStyles predicateExpression="[not self.eGet('guard').oclIsUndefined() and self.eGet('action').oclIsUndefined()/]">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <beginLabelStyleDescription showIcon="false" labelExpression="['[' + self.guard.expression + ']'/]">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="[self.eGet('guard').oclIsUndefined() and self.eGet('action').oclIsUndefined()/]">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <beginLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="[not self.eGet('guard').oclIsUndefined() and not self.eGet('action').oclIsUndefined()/]">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <beginLabelStyleDescription showIcon="false" labelExpression="['[' + self.guard.expression + ']'/]">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription showIcon="false" labelExpression="[self.action.value/]">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="StateMachineCallToEntry" sourceMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']" targetMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']/@borderedNodeMappings[name='EntryBorderedNode']" targetFinderExpression="feature:calledByAction">
          <style sizeComputationExpression="2" routingStyle="manhattan">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ExitToStateMachineCall" sourceMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']/@borderedNodeMappings[name='ExitBorderedNode']" targetMapping="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']" targetFinderExpression="feature:stateMachineCall">
          <style sizeComputationExpression="2" routingStyle="manhattan">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_1:ContainerMappingImport" name="StateMachineContainer" semanticCandidatesExpression="feature:eAllContents" domainClass="statechart.StateMachine">
          <subContainerMappings xsi:type="description_1:ContainerMappingImport" name="StateContainer" semanticCandidatesExpression="[eContents()->selectByType(State)/]" domainClass="statechart.State" childrenPresentation="List">
            <subNodeMappings name="DONode" semanticCandidatesExpression="feature:eContents" domainClass="statechart.DO">
              <style xsi:type="style:SquareDescription" showIcon="false" labelExpression="feature:value" resizeKind="NSEW">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </subNodeMappings>
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="20" arcHeight="20" showIcon="false" roundedCorner="true">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </subContainerMappings>
          <subContainerMappings xsi:type="description_1:ContainerMappingImport" name="CompositeStateContainer" semanticCandidatesExpression="[eContents()->selectByType(CompositeState)/]" domainClass="statechart.CompositeState" reusedContainerMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='StateContainer'] //@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']">
            <borderedNodeMappings name="EntryBorderedNode" semanticCandidatesExpression="feature:eContents" domainClass="statechart.ENTRY">
              <style xsi:type="style:DotDescription" showIcon="false" labelExpression="feature:value">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings name="ExitBorderedNode" semanticCandidatesExpression="feature:eContents" domainClass="statechart.EXIT">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="feature:value" workspacePath="de.uni_stuttgart.iste.cowolf.model.statechart.sirius.editor/icons/finalstate.svg">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="40" arcHeight="40" showIcon="false" roundedCorner="true" backgroundStyle="Liquid">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" showIcon="false" backgroundStyle="Liquid">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
          <conditionnalStyles predicateExpression="[container.eGet('InitialStateMachine').toString().equalsIgnoreCase(self.toString())/]">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="3" showIcon="false">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Create">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="Create State" containerMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='StateContainer']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[container.oclIsTypeOf(StateMachine)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.State" referenceName="top">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="New State"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[container.oclIsTypeOf(CompositeState)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.State" referenceName="subVertexes">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="New State"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="Create State Machine" containerMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.StateMachine" referenceName="subStateMachines">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="New State Machine"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="Create Composite State" containerMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[container.oclIsTypeOf(StateMachine)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.CompositeState" referenceName="top">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="New Composite State"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[container.oclIsTypeOf(CompositeState)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.CompositeState" referenceName="subVertexes">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="New Composite State"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="Create Transition" edgeMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@edgeMappings[name='StateToStateTransitionEdge'] //@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@edgeMappings[name='ExitToStateMachineCall'] //@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@edgeMappings[name='StateMachineCallToEntry']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:eContainer">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[not self.eContainer().oclIsTypeOf(CompositeState)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.Transition" referenceName="transitions">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[self.eContainer().oclIsTypeOf(CompositeState) or self.oclIsTypeOf(CompositeState)/]">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.Transition" referenceName="internalTransitions">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[source.oclIsKindOf(EXIT)/]">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="stateMachineCall" valueExpression="var:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[source.oclIsKindOf(EXIT)/]">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="stateMachineCall" valueExpression="var:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="[source.oclIsTypeOf(StateMachine)/]">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="stateMachineCall" valueExpression="var:source"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Create Entry" nodeMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']/@borderedNodeMappings[name='EntryBorderedNode']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.ENTRY" referenceName="actions"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Create Exit" nodeMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='CompositeStateContainer']/@borderedNodeMappings[name='ExitBorderedNode']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.EXIT" referenceName="actions"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Create Do Action" nodeMappings="//@ownedViewpoints[name='statechart']/@ownedRepresentations[name='statechart%20diagram']/@defaultLayer/@containerMappings[name='StateMachineContainer']/@subContainerMappings[name='StateContainer']/@subNodeMappings[name='DONode']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="statechart.DO" referenceName="actions">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="New Do Action"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
  </ownedViewpoints>
</description:Group>
