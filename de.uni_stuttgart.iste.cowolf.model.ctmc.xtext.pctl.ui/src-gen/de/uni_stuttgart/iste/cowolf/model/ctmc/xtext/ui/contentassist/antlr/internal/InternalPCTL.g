/*
* generated by Xtext
*/
grammar InternalPCTL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services.PCTLGrammarAccess;

}

@parser::members {
 
 	private PCTLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PCTLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleStart
entryRuleStart 
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStartAccess().getRuleAssignment()); }
(rule__Start__RuleAssignment)*
{ after(grammarAccess.getStartAccess().getRuleAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFragment
entryRuleFragment 
:
{ before(grammarAccess.getFragmentRule()); }
	 ruleFragment
{ after(grammarAccess.getFragmentRule()); } 
	 EOF 
;

// Rule Fragment
ruleFragment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFragmentAccess().getAlternatives()); }
(rule__Fragment__Alternatives)
{ after(grammarAccess.getFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComment
entryRuleComment 
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAccess().getCommentAssignment()); }
(rule__Comment__CommentAssignment)
{ after(grammarAccess.getCommentAccess().getCommentAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getAlternatives()); }
(rule__Rule__Alternatives)
{ after(grammarAccess.getRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSteadyState
entryRuleSteadyState 
:
{ before(grammarAccess.getSteadyStateRule()); }
	 ruleSteadyState
{ after(grammarAccess.getSteadyStateRule()); } 
	 EOF 
;

// Rule SteadyState
ruleSteadyState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSteadyStateAccess().getGroup()); }
(rule__SteadyState__Group__0)
{ after(grammarAccess.getSteadyStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedProbability
entryRuleQuantifiedProbability 
:
{ before(grammarAccess.getQuantifiedProbabilityRule()); }
	 ruleQuantifiedProbability
{ after(grammarAccess.getQuantifiedProbabilityRule()); } 
	 EOF 
;

// Rule QuantifiedProbability
ruleQuantifiedProbability
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getGroup()); }
(rule__QuantifiedProbability__Group__0)
{ after(grammarAccess.getQuantifiedProbabilityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanRule
entryRuleBooleanRule 
:
{ before(grammarAccess.getBooleanRuleRule()); }
	 ruleBooleanRule
{ after(grammarAccess.getBooleanRuleRule()); } 
	 EOF 
;

// Rule BooleanRule
ruleBooleanRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanRuleAccess().getValueAssignment()); }
(rule__BooleanRule__ValueAssignment)
{ after(grammarAccess.getBooleanRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateFormula
entryRuleStateFormula 
:
{ before(grammarAccess.getStateFormulaRule()); }
	 ruleStateFormula
{ after(grammarAccess.getStateFormulaRule()); } 
	 EOF 
;

// Rule StateFormula
ruleStateFormula
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateFormulaAccess().getAlternatives()); }
(rule__StateFormula__Alternatives)
{ after(grammarAccess.getStateFormulaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getGroup()); }
(rule__Negation__Group__0)
{ after(grammarAccess.getNegationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJunction
entryRuleJunction 
:
{ before(grammarAccess.getJunctionRule()); }
	 ruleJunction
{ after(grammarAccess.getJunctionRule()); } 
	 EOF 
;

// Rule Junction
ruleJunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJunctionAccess().getAlternatives()); }
(rule__Junction__Alternatives)
{ after(grammarAccess.getJunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDisjunction
entryRuleDisjunction 
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
(rule__Disjunction__Group__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplication
entryRuleImplication 
:
{ before(grammarAccess.getImplicationRule()); }
	 ruleImplication
{ after(grammarAccess.getImplicationRule()); } 
	 EOF 
;

// Rule Implication
ruleImplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicationAccess().getGroup()); }
(rule__Implication__Group__0)
{ after(grammarAccess.getImplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbability
entryRuleProbability 
:
{ before(grammarAccess.getProbabilityRule()); }
	 ruleProbability
{ after(grammarAccess.getProbabilityRule()); } 
	 EOF 
;

// Rule Probability
ruleProbability
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbabilityAccess().getGroup()); }
(rule__Probability__Group__0)
{ after(grammarAccess.getProbabilityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getGroup()); }
(rule__Label__Group__0)
{ after(grammarAccess.getLabelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanAccess().getValueAssignment()); }
(rule__Boolean__ValueAssignment)
{ after(grammarAccess.getBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathFormula
entryRulePathFormula 
:
{ before(grammarAccess.getPathFormulaRule()); }
	 rulePathFormula
{ after(grammarAccess.getPathFormulaRule()); } 
	 EOF 
;

// Rule PathFormula
rulePathFormula
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathFormulaAccess().getAlternatives()); }
(rule__PathFormula__Alternatives)
{ after(grammarAccess.getPathFormulaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUntil
entryRuleUntil 
:
{ before(grammarAccess.getUntilRule()); }
	 ruleUntil
{ after(grammarAccess.getUntilRule()); } 
	 EOF 
;

// Rule Until
ruleUntil
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUntilAccess().getGroup()); }
(rule__Until__Group__0)
{ after(grammarAccess.getUntilAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNext
entryRuleNext 
:
{ before(grammarAccess.getNextRule()); }
	 ruleNext
{ after(grammarAccess.getNextRule()); } 
	 EOF 
;

// Rule Next
ruleNext
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNextAccess().getGroup()); }
(rule__Next__Group__0)
{ after(grammarAccess.getNextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFuture
entryRuleFuture 
:
{ before(grammarAccess.getFutureRule()); }
	 ruleFuture
{ after(grammarAccess.getFutureRule()); } 
	 EOF 
;

// Rule Future
ruleFuture
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFutureAccess().getGroup()); }
(rule__Future__Group__0)
{ after(grammarAccess.getFutureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobally
entryRuleGlobally 
:
{ before(grammarAccess.getGloballyRule()); }
	 ruleGlobally
{ after(grammarAccess.getGloballyRule()); } 
	 EOF 
;

// Rule Globally
ruleGlobally
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGloballyAccess().getGroup()); }
(rule__Globally__Group__0)
{ after(grammarAccess.getGloballyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareProbability
entryRuleCompareProbability 
:
{ before(grammarAccess.getCompareProbabilityRule()); }
	 ruleCompareProbability
{ after(grammarAccess.getCompareProbabilityRule()); } 
	 EOF 
;

// Rule CompareProbability
ruleCompareProbability
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareProbabilityAccess().getGroup()); }
(rule__CompareProbability__Group__0)
{ after(grammarAccess.getCompareProbabilityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeBound
entryRuleTimeBound 
:
{ before(grammarAccess.getTimeBoundRule()); }
	 ruleTimeBound
{ after(grammarAccess.getTimeBoundRule()); } 
	 EOF 
;

// Rule TimeBound
ruleTimeBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeBoundAccess().getAlternatives()); }
(rule__TimeBound__Alternatives)
{ after(grammarAccess.getTimeBoundAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Fragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFragmentAccess().getCommentParserRuleCall_0()); }
	ruleComment
{ after(grammarAccess.getFragmentAccess().getCommentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFragmentAccess().getRuleParserRuleCall_1()); }
	ruleRule
{ after(grammarAccess.getFragmentAccess().getRuleParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBooleanRuleParserRuleCall_0()); }
	ruleBooleanRule
{ after(grammarAccess.getRuleAccess().getBooleanRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getSteadyStateParserRuleCall_1()); }
	ruleSteadyState
{ after(grammarAccess.getRuleAccess().getSteadyStateParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getQuantifiedProbabilityParserRuleCall_2()); }
	ruleQuantifiedProbability
{ after(grammarAccess.getRuleAccess().getQuantifiedProbabilityParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getBoundAssignment_1_0()); }
(rule__SteadyState__BoundAssignment_1_0)
{ after(grammarAccess.getSteadyStateAccess().getBoundAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getSteadyStateAccess().getEqualsSignQuestionMarkKeyword_1_1()); }

	'=?' 

{ after(grammarAccess.getSteadyStateAccess().getEqualsSignQuestionMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getGroup_0()); }
(rule__StateFormula__Group_0__0)
{ after(grammarAccess.getStateFormulaAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStateFormulaAccess().getLeftAssignment_1()); }
(rule__StateFormula__LeftAssignment_1)
{ after(grammarAccess.getStateFormulaAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Alternatives_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getRightAssignment_0_2_0()); }
(rule__StateFormula__RightAssignment_0_2_0)
{ after(grammarAccess.getStateFormulaAccess().getRightAssignment_0_2_0()); }
)

    |(
{ before(grammarAccess.getStateFormulaAccess().getRightAssignment_0_2_1()); }
(rule__StateFormula__RightAssignment_0_2_1)
{ after(grammarAccess.getStateFormulaAccess().getRightAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__LeftAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getLeftNegationParserRuleCall_1_0_0()); }
	ruleNegation
{ after(grammarAccess.getStateFormulaAccess().getLeftNegationParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getStateFormulaAccess().getLeftAtomicParserRuleCall_1_0_1()); }
	ruleAtomic
{ after(grammarAccess.getStateFormulaAccess().getLeftAtomicParserRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getStateFormulaAccess().getLeftProbabilityParserRuleCall_1_0_2()); }
	ruleProbability
{ after(grammarAccess.getStateFormulaAccess().getLeftProbabilityParserRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Junction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJunctionAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
{ after(grammarAccess.getJunctionAccess().getConjunctionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getJunctionAccess().getDisjunctionParserRuleCall_1()); }
	ruleDisjunction
{ after(grammarAccess.getJunctionAccess().getDisjunctionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getStateParserRuleCall_0()); }
	ruleState
{ after(grammarAccess.getAtomicAccess().getStateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getLabelParserRuleCall_1()); }
	ruleLabel
{ after(grammarAccess.getAtomicAccess().getLabelParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getBooleanParserRuleCall_2()); }
	ruleBoolean
{ after(grammarAccess.getAtomicAccess().getBooleanParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathFormula__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathFormulaAccess().getNextParserRuleCall_0()); }
	ruleNext
{ after(grammarAccess.getPathFormulaAccess().getNextParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPathFormulaAccess().getUntilParserRuleCall_1()); }
	ruleUntil
{ after(grammarAccess.getPathFormulaAccess().getUntilParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPathFormulaAccess().getFutureParserRuleCall_2()); }
	ruleFuture
{ after(grammarAccess.getPathFormulaAccess().getFutureParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPathFormulaAccess().getGloballyParserRuleCall_3()); }
	ruleGlobally
{ after(grammarAccess.getPathFormulaAccess().getGloballyParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Until__TypeAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getTypeUKeyword_1_0_0()); }

	'U' 

{ after(grammarAccess.getUntilAccess().getTypeUKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getUntilAccess().getTypeWKeyword_1_0_1()); }

	'W' 

{ after(grammarAccess.getUntilAccess().getTypeWKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getUntilAccess().getTypeRKeyword_1_0_2()); }

	'R' 

{ after(grammarAccess.getUntilAccess().getTypeRKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getGroup_0()); }
(rule__TimeBound__Group_0__0)
{ after(grammarAccess.getTimeBoundAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTimeBoundAccess().getGroup_1()); }
(rule__TimeBound__Group_1__0)
{ after(grammarAccess.getTimeBoundAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__OperatorAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorCOMPARATORTerminalRuleCall_0_0_0_0()); }
	RULE_COMPARATOR
{ after(grammarAccess.getTimeBoundAccess().getOperatorCOMPARATORTerminalRuleCall_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getTimeBoundAccess().getOperatorEqualsSignKeyword_0_0_0_1()); }

	'=' 

{ after(grammarAccess.getTimeBoundAccess().getOperatorEqualsSignKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SteadyState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SteadyState__Group__0__Impl
	rule__SteadyState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getSKeyword_0()); }

	'S' 

{ after(grammarAccess.getSteadyStateAccess().getSKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SteadyState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SteadyState__Group__1__Impl
	rule__SteadyState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getAlternatives_1()); }
(rule__SteadyState__Alternatives_1)
{ after(grammarAccess.getSteadyStateAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SteadyState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SteadyState__Group__2__Impl
	rule__SteadyState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getSteadyStateAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SteadyState__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SteadyState__Group__3__Impl
	rule__SteadyState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getValueAssignment_3()); }
(rule__SteadyState__ValueAssignment_3)
{ after(grammarAccess.getSteadyStateAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SteadyState__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SteadyState__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getSteadyStateAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QuantifiedProbability__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group__0__Impl
	rule__QuantifiedProbability__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getGroup_0()); }
(rule__QuantifiedProbability__Group_0__0)
{ after(grammarAccess.getQuantifiedProbabilityAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedProbability__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group__1__Impl
	rule__QuantifiedProbability__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getQuantifiedProbabilityAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedProbability__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group__2__Impl
	rule__QuantifiedProbability__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getValueAssignment_2()); }
(rule__QuantifiedProbability__ValueAssignment_2)
{ after(grammarAccess.getQuantifiedProbabilityAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedProbability__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getQuantifiedProbabilityAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QuantifiedProbability__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group_0__0__Impl
	rule__QuantifiedProbability__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getPKeyword_0_0()); }

	'P' 

{ after(grammarAccess.getQuantifiedProbabilityAccess().getPKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedProbability__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedProbability__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getEqualsSignQuestionMarkKeyword_0_1()); }

	'=?' 

{ after(grammarAccess.getQuantifiedProbabilityAccess().getEqualsSignQuestionMarkKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateFormula__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateFormula__Group_0__0__Impl
	rule__StateFormula__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getStateFormulaAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateFormula__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateFormula__Group_0__1__Impl
	rule__StateFormula__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getLeftAssignment_0_1()); }
(rule__StateFormula__LeftAssignment_0_1)
{ after(grammarAccess.getStateFormulaAccess().getLeftAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateFormula__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateFormula__Group_0__2__Impl
	rule__StateFormula__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getAlternatives_0_2()); }
(rule__StateFormula__Alternatives_0_2)?
{ after(grammarAccess.getStateFormulaAccess().getAlternatives_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateFormula__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateFormula__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getStateFormulaAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Negation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__0__Impl
	rule__Negation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getStateFormulaParserRuleCall_1()); }
	ruleStateFormula
{ after(grammarAccess.getNegationAccess().getStateFormulaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getAmpersandKeyword_0()); }

	'&' 

{ after(grammarAccess.getConjunctionAccess().getAmpersandKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
	rule__Conjunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getStateFormulaParserRuleCall_1()); }
	ruleStateFormula
{ after(grammarAccess.getConjunctionAccess().getStateFormulaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_2()); }
(rule__Conjunction__Group_2__0)*
{ after(grammarAccess.getConjunctionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conjunction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_2__0__Impl
	rule__Conjunction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_2_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_2__1__Impl
	rule__Conjunction__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getAmpersandKeyword_2_1()); }

	'&' 

{ after(grammarAccess.getConjunctionAccess().getAmpersandKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightAssignment_2_2()); }
(rule__Conjunction__RightAssignment_2_2)
{ after(grammarAccess.getConjunctionAccess().getRightAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Disjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_0()); }

	'|' 

{ after(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__1__Impl
	rule__Disjunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getStateFormulaParserRuleCall_1()); }
	ruleStateFormula
{ after(grammarAccess.getDisjunctionAccess().getStateFormulaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup_2()); }
(rule__Disjunction__Group_2__0)*
{ after(grammarAccess.getDisjunctionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Disjunction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_2__0__Impl
	rule__Disjunction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_2_0()); }
(

)
{ after(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_2__1__Impl
	rule__Disjunction__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_2_1()); }

	'|' 

{ after(grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_2_2()); }
(rule__Disjunction__RightAssignment_2_2)
{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Implication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__0__Impl
	rule__Implication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getEqualsSignGreaterThanSignKeyword_0()); }

	'=>' 

{ after(grammarAccess.getImplicationAccess().getEqualsSignGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightAssignment_1()); }
(rule__Implication__RightAssignment_1)
{ after(grammarAccess.getImplicationAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Probability__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__0__Impl
	rule__Probability__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getPKeyword_0()); }

	'P' 

{ after(grammarAccess.getProbabilityAccess().getPKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probability__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__1__Impl
	rule__Probability__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getProbabilityAction_1()); }
(

)
{ after(grammarAccess.getProbabilityAccess().getProbabilityAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probability__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__2__Impl
	rule__Probability__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getComparatorAssignment_2()); }
(rule__Probability__ComparatorAssignment_2)
{ after(grammarAccess.getProbabilityAccess().getComparatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probability__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__3__Impl
	rule__Probability__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getLeftSquareBracketKeyword_3()); }

	'[' 

{ after(grammarAccess.getProbabilityAccess().getLeftSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probability__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__4__Impl
	rule__Probability__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getPathAssignment_4()); }
(rule__Probability__PathAssignment_4)
{ after(grammarAccess.getProbabilityAccess().getPathAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probability__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probability__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getProbabilityAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }

	'State:' 

{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getValueAssignment_1()); }
(rule__State__ValueAssignment_1)
{ after(grammarAccess.getStateAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getLabelKeyword_0()); }

	'Label:' 

{ after(grammarAccess.getLabelAccess().getLabelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getValueAssignment_1()); }
(rule__Label__ValueAssignment_1)
{ after(grammarAccess.getLabelAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Until__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Until__Group__0__Impl
	rule__Until__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Until__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getLeftAssignment_0()); }
(rule__Until__LeftAssignment_0)
{ after(grammarAccess.getUntilAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Until__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Until__Group__1__Impl
	rule__Until__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Until__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getTypeAssignment_1()); }
(rule__Until__TypeAssignment_1)
{ after(grammarAccess.getUntilAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Until__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Until__Group__2__Impl
	rule__Until__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Until__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getBoundAssignment_2()); }
(rule__Until__BoundAssignment_2)?
{ after(grammarAccess.getUntilAccess().getBoundAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Until__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Until__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Until__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getRightAssignment_3()); }
(rule__Until__RightAssignment_3)
{ after(grammarAccess.getUntilAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Next__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Next__Group__0__Impl
	rule__Next__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Next__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextAccess().getXKeyword_0()); }

	'X' 

{ after(grammarAccess.getNextAccess().getXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Next__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Next__Group__1__Impl
	rule__Next__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Next__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextAccess().getBoundAssignment_1()); }
(rule__Next__BoundAssignment_1)?
{ after(grammarAccess.getNextAccess().getBoundAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Next__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Next__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Next__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextAccess().getValueAssignment_2()); }
(rule__Next__ValueAssignment_2)
{ after(grammarAccess.getNextAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Future__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Future__Group__0__Impl
	rule__Future__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Future__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFutureAccess().getFKeyword_0()); }

	'F' 

{ after(grammarAccess.getFutureAccess().getFKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Future__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Future__Group__1__Impl
	rule__Future__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Future__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFutureAccess().getBoundAssignment_1()); }
(rule__Future__BoundAssignment_1)?
{ after(grammarAccess.getFutureAccess().getBoundAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Future__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Future__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Future__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFutureAccess().getValueAssignment_2()); }
(rule__Future__ValueAssignment_2)
{ after(grammarAccess.getFutureAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Globally__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Globally__Group__0__Impl
	rule__Globally__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Globally__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyAccess().getGKeyword_0()); }

	'G' 

{ after(grammarAccess.getGloballyAccess().getGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Globally__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Globally__Group__1__Impl
	rule__Globally__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Globally__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyAccess().getBoundAssignment_1()); }
(rule__Globally__BoundAssignment_1)?
{ after(grammarAccess.getGloballyAccess().getBoundAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Globally__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Globally__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Globally__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyAccess().getValueAssignment_2()); }
(rule__Globally__ValueAssignment_2)
{ after(grammarAccess.getGloballyAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareProbability__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareProbability__Group__0__Impl
	rule__CompareProbability__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareProbability__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareProbabilityAccess().getOperatorAssignment_0()); }
(rule__CompareProbability__OperatorAssignment_0)
{ after(grammarAccess.getCompareProbabilityAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareProbability__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareProbability__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareProbability__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareProbabilityAccess().getValueAssignment_1()); }
(rule__CompareProbability__ValueAssignment_1)
{ after(grammarAccess.getCompareProbabilityAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeBound__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_0__0__Impl
	rule__TimeBound__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorAssignment_0_0()); }
(rule__TimeBound__OperatorAssignment_0_0)
{ after(grammarAccess.getTimeBoundAccess().getOperatorAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeBound__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getValueAssignment_0_1()); }
(rule__TimeBound__ValueAssignment_0_1)
{ after(grammarAccess.getTimeBoundAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeBound__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_1__0__Impl
	rule__TimeBound__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getTimeBoundAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeBound__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_1__1__Impl
	rule__TimeBound__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getFromAssignment_1_1()); }
(rule__TimeBound__FromAssignment_1_1)
{ after(grammarAccess.getTimeBoundAccess().getFromAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeBound__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_1__2__Impl
	rule__TimeBound__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorAssignment_1_2()); }
(rule__TimeBound__OperatorAssignment_1_2)
{ after(grammarAccess.getTimeBoundAccess().getOperatorAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeBound__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_1__3__Impl
	rule__TimeBound__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getToAssignment_1_3()); }
(rule__TimeBound__ToAssignment_1_3)
{ after(grammarAccess.getTimeBoundAccess().getToAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeBound__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeBound__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getRightSquareBracketKeyword_1_4()); }

	']' 

{ after(grammarAccess.getTimeBoundAccess().getRightSquareBracketKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Start__RuleAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartAccess().getRuleFragmentParserRuleCall_0()); }
	ruleFragment{ after(grammarAccess.getStartAccess().getRuleFragmentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__CommentAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCommentSL_COMMENTTerminalRuleCall_0()); }
	RULE_SL_COMMENT{ after(grammarAccess.getCommentAccess().getCommentSL_COMMENTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__BoundAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getBoundCompareProbabilityParserRuleCall_1_0_0()); }
	ruleCompareProbability{ after(grammarAccess.getSteadyStateAccess().getBoundCompareProbabilityParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SteadyState__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSteadyStateAccess().getValueStateFormulaParserRuleCall_3_0()); }
	ruleStateFormula{ after(grammarAccess.getSteadyStateAccess().getValueStateFormulaParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedProbability__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedProbabilityAccess().getValuePathFormulaParserRuleCall_2_0()); }
	rulePathFormula{ after(grammarAccess.getQuantifiedProbabilityAccess().getValuePathFormulaParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanRuleAccess().getValueStateFormulaParserRuleCall_0()); }
	ruleStateFormula{ after(grammarAccess.getBooleanRuleAccess().getValueStateFormulaParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__LeftAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getLeftStateFormulaParserRuleCall_0_1_0()); }
	ruleStateFormula{ after(grammarAccess.getStateFormulaAccess().getLeftStateFormulaParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__RightAssignment_0_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getRightJunctionParserRuleCall_0_2_0_0()); }
	ruleJunction{ after(grammarAccess.getStateFormulaAccess().getRightJunctionParserRuleCall_0_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__RightAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getRightImplicationParserRuleCall_0_2_1_0()); }
	ruleImplication{ after(grammarAccess.getStateFormulaAccess().getRightImplicationParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFormula__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFormulaAccess().getLeftAlternatives_1_0()); }
(rule__StateFormula__LeftAlternatives_1_0)
{ after(grammarAccess.getStateFormulaAccess().getLeftAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); }
	ruleStateFormula{ after(grammarAccess.getConjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); }
	ruleStateFormula{ after(grammarAccess.getDisjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightStateFormulaParserRuleCall_1_0()); }
	ruleStateFormula{ after(grammarAccess.getImplicationAccess().getRightStateFormulaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__ComparatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getComparatorCompareProbabilityParserRuleCall_2_0()); }
	ruleCompareProbability{ after(grammarAccess.getProbabilityAccess().getComparatorCompareProbabilityParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__PathAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityAccess().getPathPathFormulaParserRuleCall_4_0()); }
	rulePathFormula{ after(grammarAccess.getProbabilityAccess().getPathPathFormulaParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getValueIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getValueIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getValueIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLabelAccess().getValueIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
	RULE_BOOL{ after(grammarAccess.getBooleanAccess().getValueBOOLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Until__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getLeftStateFormulaParserRuleCall_0_0()); }
	ruleStateFormula{ after(grammarAccess.getUntilAccess().getLeftStateFormulaParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Until__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getTypeAlternatives_1_0()); }
(rule__Until__TypeAlternatives_1_0)
{ after(grammarAccess.getUntilAccess().getTypeAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Until__BoundAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getBoundTimeBoundParserRuleCall_2_0()); }
	ruleTimeBound{ after(grammarAccess.getUntilAccess().getBoundTimeBoundParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Until__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilAccess().getRightStateFormulaParserRuleCall_3_0()); }
	ruleStateFormula{ after(grammarAccess.getUntilAccess().getRightStateFormulaParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Next__BoundAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextAccess().getBoundTimeBoundParserRuleCall_1_0()); }
	ruleTimeBound{ after(grammarAccess.getNextAccess().getBoundTimeBoundParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Next__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextAccess().getValueStateFormulaParserRuleCall_2_0()); }
	ruleStateFormula{ after(grammarAccess.getNextAccess().getValueStateFormulaParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Future__BoundAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFutureAccess().getBoundTimeBoundParserRuleCall_1_0()); }
	ruleTimeBound{ after(grammarAccess.getFutureAccess().getBoundTimeBoundParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Future__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFutureAccess().getValueStateFormulaParserRuleCall_2_0()); }
	ruleStateFormula{ after(grammarAccess.getFutureAccess().getValueStateFormulaParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Globally__BoundAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyAccess().getBoundTimeBoundParserRuleCall_1_0()); }
	ruleTimeBound{ after(grammarAccess.getGloballyAccess().getBoundTimeBoundParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Globally__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyAccess().getValueStateFormulaParserRuleCall_2_0()); }
	ruleStateFormula{ after(grammarAccess.getGloballyAccess().getValueStateFormulaParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareProbability__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareProbabilityAccess().getOperatorCOMPARATORTerminalRuleCall_0_0()); }
	RULE_COMPARATOR{ after(grammarAccess.getCompareProbabilityAccess().getOperatorCOMPARATORTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareProbability__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareProbabilityAccess().getValueDOUBLETerminalRuleCall_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getCompareProbabilityAccess().getValueDOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__OperatorAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorAlternatives_0_0_0()); }
(rule__TimeBound__OperatorAlternatives_0_0_0)
{ after(grammarAccess.getTimeBoundAccess().getOperatorAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getValueDOUBLETerminalRuleCall_0_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTimeBoundAccess().getValueDOUBLETerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__FromAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getFromDOUBLETerminalRuleCall_1_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTimeBoundAccess().getFromDOUBLETerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__OperatorAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorCommaKeyword_1_2_0()); }
(
{ before(grammarAccess.getTimeBoundAccess().getOperatorCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getTimeBoundAccess().getOperatorCommaKeyword_1_2_0()); }
)

{ after(grammarAccess.getTimeBoundAccess().getOperatorCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeBound__ToAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeBoundAccess().getToDOUBLETerminalRuleCall_1_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTimeBoundAccess().getToDOUBLETerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false');

RULE_DOUBLE : (RULE_INT ('.' RULE_INT)?|'.' RULE_INT);

RULE_COMPARATOR : ('>' '='?|'<' '='?);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


