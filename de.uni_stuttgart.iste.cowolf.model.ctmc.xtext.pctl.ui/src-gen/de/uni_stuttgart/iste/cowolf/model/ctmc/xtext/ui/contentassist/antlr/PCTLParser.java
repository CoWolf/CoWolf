/*
* generated by Xtext
*/
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services.PCTLGrammarAccess;

public class PCTLParser extends AbstractContentAssistParser {
	
	@Inject
	private PCTLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal.InternalPCTLParser createParser() {
		de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal.InternalPCTLParser result = new de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal.InternalPCTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFragmentAccess().getAlternatives(), "rule__Fragment__Alternatives");
					put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
					put(grammarAccess.getSteadyStateAccess().getAlternatives_2(), "rule__SteadyState__Alternatives_2");
					put(grammarAccess.getStateFormulaAccess().getAlternatives(), "rule__StateFormula__Alternatives");
					put(grammarAccess.getStateFormulaAccess().getAlternatives_0_3(), "rule__StateFormula__Alternatives_0_3");
					put(grammarAccess.getStateFormulaAccess().getLeftAlternatives_1_0(), "rule__StateFormula__LeftAlternatives_1_0");
					put(grammarAccess.getJunctionAccess().getAlternatives(), "rule__Junction__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getPathFormulaAccess().getAlternatives(), "rule__PathFormula__Alternatives");
					put(grammarAccess.getUntilAccess().getTypeAlternatives_1_0(), "rule__Until__TypeAlternatives_1_0");
					put(grammarAccess.getTimeBoundAccess().getAlternatives(), "rule__TimeBound__Alternatives");
					put(grammarAccess.getTimeBoundAccess().getOperatorAlternatives_0_0_0(), "rule__TimeBound__OperatorAlternatives_0_0_0");
					put(grammarAccess.getStartAccess().getGroup(), "rule__Start__Group__0");
					put(grammarAccess.getSteadyStateAccess().getGroup(), "rule__SteadyState__Group__0");
					put(grammarAccess.getQuantifiedProbabilityAccess().getGroup(), "rule__QuantifiedProbability__Group__0");
					put(grammarAccess.getStateFormulaAccess().getGroup_0(), "rule__StateFormula__Group_0__0");
					put(grammarAccess.getNegationAccess().getGroup(), "rule__Negation__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_2(), "rule__Conjunction__Group_2__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_2(), "rule__Disjunction__Group_2__0");
					put(grammarAccess.getImplicationAccess().getGroup(), "rule__Implication__Group__0");
					put(grammarAccess.getProbabilityAccess().getGroup(), "rule__Probability__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getUntilAccess().getGroup(), "rule__Until__Group__0");
					put(grammarAccess.getNextAccess().getGroup(), "rule__Next__Group__0");
					put(grammarAccess.getFutureAccess().getGroup(), "rule__Future__Group__0");
					put(grammarAccess.getGloballyAccess().getGroup(), "rule__Globally__Group__0");
					put(grammarAccess.getCompareProbabilityAccess().getGroup(), "rule__CompareProbability__Group__0");
					put(grammarAccess.getTimeBoundAccess().getGroup_0(), "rule__TimeBound__Group_0__0");
					put(grammarAccess.getTimeBoundAccess().getGroup_1(), "rule__TimeBound__Group_1__0");
					put(grammarAccess.getStartAccess().getRuleAssignment_1(), "rule__Start__RuleAssignment_1");
					put(grammarAccess.getCommentAccess().getCommentAssignment(), "rule__Comment__CommentAssignment");
					put(grammarAccess.getSteadyStateAccess().getBoundAssignment_2_0(), "rule__SteadyState__BoundAssignment_2_0");
					put(grammarAccess.getSteadyStateAccess().getValueAssignment_6(), "rule__SteadyState__ValueAssignment_6");
					put(grammarAccess.getQuantifiedProbabilityAccess().getValueAssignment_5(), "rule__QuantifiedProbability__ValueAssignment_5");
					put(grammarAccess.getBooleanRuleAccess().getValueAssignment(), "rule__BooleanRule__ValueAssignment");
					put(grammarAccess.getStateFormulaAccess().getLeftAssignment_0_2(), "rule__StateFormula__LeftAssignment_0_2");
					put(grammarAccess.getStateFormulaAccess().getRightAssignment_0_3_0(), "rule__StateFormula__RightAssignment_0_3_0");
					put(grammarAccess.getStateFormulaAccess().getRightAssignment_0_3_1(), "rule__StateFormula__RightAssignment_0_3_1");
					put(grammarAccess.getStateFormulaAccess().getLeftAssignment_1(), "rule__StateFormula__LeftAssignment_1");
					put(grammarAccess.getConjunctionAccess().getRightAssignment_2_2(), "rule__Conjunction__RightAssignment_2_2");
					put(grammarAccess.getDisjunctionAccess().getRightAssignment_2_2(), "rule__Disjunction__RightAssignment_2_2");
					put(grammarAccess.getImplicationAccess().getRightAssignment_1(), "rule__Implication__RightAssignment_1");
					put(grammarAccess.getProbabilityAccess().getComparatorAssignment_3(), "rule__Probability__ComparatorAssignment_3");
					put(grammarAccess.getProbabilityAccess().getPathAssignment_6(), "rule__Probability__PathAssignment_6");
					put(grammarAccess.getStateAccess().getValueAssignment_1(), "rule__State__ValueAssignment_1");
					put(grammarAccess.getLabelAccess().getValueAssignment_1(), "rule__Label__ValueAssignment_1");
					put(grammarAccess.getBooleanAccess().getValueAssignment(), "rule__Boolean__ValueAssignment");
					put(grammarAccess.getUntilAccess().getLeftAssignment_0(), "rule__Until__LeftAssignment_0");
					put(grammarAccess.getUntilAccess().getTypeAssignment_1(), "rule__Until__TypeAssignment_1");
					put(grammarAccess.getUntilAccess().getBoundAssignment_2(), "rule__Until__BoundAssignment_2");
					put(grammarAccess.getUntilAccess().getRightAssignment_3(), "rule__Until__RightAssignment_3");
					put(grammarAccess.getNextAccess().getBoundAssignment_1(), "rule__Next__BoundAssignment_1");
					put(grammarAccess.getNextAccess().getValueAssignment_2(), "rule__Next__ValueAssignment_2");
					put(grammarAccess.getFutureAccess().getBoundAssignment_1(), "rule__Future__BoundAssignment_1");
					put(grammarAccess.getFutureAccess().getValueAssignment_2(), "rule__Future__ValueAssignment_2");
					put(grammarAccess.getGloballyAccess().getBoundAssignment_1(), "rule__Globally__BoundAssignment_1");
					put(grammarAccess.getGloballyAccess().getValueAssignment_2(), "rule__Globally__ValueAssignment_2");
					put(grammarAccess.getCompareProbabilityAccess().getOperatorAssignment_0(), "rule__CompareProbability__OperatorAssignment_0");
					put(grammarAccess.getCompareProbabilityAccess().getValueAssignment_1(), "rule__CompareProbability__ValueAssignment_1");
					put(grammarAccess.getTimeBoundAccess().getOperatorAssignment_0_0(), "rule__TimeBound__OperatorAssignment_0_0");
					put(grammarAccess.getTimeBoundAccess().getValueAssignment_0_1(), "rule__TimeBound__ValueAssignment_0_1");
					put(grammarAccess.getTimeBoundAccess().getFromAssignment_1_1(), "rule__TimeBound__FromAssignment_1_1");
					put(grammarAccess.getTimeBoundAccess().getOperatorAssignment_1_2(), "rule__TimeBound__OperatorAssignment_1_2");
					put(grammarAccess.getTimeBoundAccess().getToAssignment_1_3(), "rule__TimeBound__ToAssignment_1_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal.InternalPCTLParser typedParser = (de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.ui.contentassist.antlr.internal.InternalPCTLParser) parser;
			typedParser.entryRuleStart();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public PCTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PCTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
