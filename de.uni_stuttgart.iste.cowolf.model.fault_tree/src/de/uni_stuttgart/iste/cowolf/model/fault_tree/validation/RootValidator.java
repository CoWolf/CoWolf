/**
 *
 * $Id$
 */
package de.uni_stuttgart.iste.cowolf.model.fault_tree.validation;

import de.uni_stuttgart.iste.cowolf.model.fault_tree.ErrorInstance;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.ErrorType;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.Event;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.FailureInstance;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.FailureType;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.Gate;
import de.uni_stuttgart.iste.cowolf.model.fault_tree.Hazard;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link de.uni_stuttgart.iste.cowolf.model.fault_tree.Root}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface RootValidator {
	boolean validate();

	boolean validateHazard(Hazard value);
	boolean validateGate(EList<Gate> value);
	boolean validateEvent(EList<Event> value);
	boolean validateFailure_instance(EList<FailureInstance> value);
	boolean validateFailure_type(EList<FailureType> value);
	boolean validateError_instance(EList<ErrorInstance> value);
	boolean validateError_type(EList<ErrorType> value);
}
