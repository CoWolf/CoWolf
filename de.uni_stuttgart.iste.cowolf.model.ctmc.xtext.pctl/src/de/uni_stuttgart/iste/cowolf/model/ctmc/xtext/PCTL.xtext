grammar de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.PCTL with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate pCTL "http://www.uni_stuttgart.de/iste/cowolf/model/ctmc/xtext/PCTL"

Start:
	rule+=Fragment*
;

terminal BOOL : 'true'|'false';

terminal DOUBLE returns ecore::EDouble : INT ('.' INT)? | ('.' INT);

terminal COMPARATOR returns ecore::EString : '>''='?|'<''='?;

Fragment returns Fragment:
    Comment|Rule
;

Comment:
    comment=SL_COMMENT
;

Rule:
    (BooleanRule|SteadyState|QuantifiedProbability)
;

SteadyState:
    "S" (bound=CompareProbability|"=?") "[" value=StateFormula "]";
    

QuantifiedProbability:
    ("P" "=?") "[" value=PathFormula "]"
;

BooleanRule:
    value=StateFormula
;


//###########################################################
//#             State Formular expressions                  #
//###########################################################

StateFormula:
    '(' left=StateFormula (right=Junction|right=Implication)? ')' | left=(Negation| Atomic| Probability)
;

Negation returns StateExpression:
    "!" StateFormula
;

Junction returns RightStateExpression:
    Conjunction
    | Disjunction
;

Conjunction returns RightStateExpression:
    '&' StateFormula ({Conjunction.left=current} '&' right=StateFormula)*
;

Disjunction returns RightStateExpression:
    '|' StateFormula ({Disjunction.left=current} '|' right=StateFormula)*
;

Implication returns RightStateExpression:
    "=>" right=StateFormula
;  

Probability returns StateExpression:
    ("P" {Probability} comparator=CompareProbability "[" path=PathFormula "]");   
    

Atomic returns StateExpression:
     (State|Label|Boolean)
;
    
State:
    'State:' value=ID;

Label:
    'Label:' value=ID;
    
Boolean:
    value=BOOL;
    
//###########################################################
//#             Path Formular expressions                  #
//###########################################################

PathFormula:
      Next
    | Until
    | Future
    | Globally
;
	
Until:
    left=StateFormula type=('U' | 'W' | 'R') bound=TimeBound? right=StateFormula
;

Next:
    "X" bound=TimeBound? value=StateFormula;

Future:
    'F' bound=TimeBound? value=StateFormula
;

Globally:
    'G' bound=TimeBound? value=StateFormula
; 
	
CompareProbability:
    operator=COMPARATOR value=DOUBLE
;

TimeBound:
	(operator=(COMPARATOR|'=') value=DOUBLE) | ("[" from=DOUBLE operator="," to=DOUBLE "]");