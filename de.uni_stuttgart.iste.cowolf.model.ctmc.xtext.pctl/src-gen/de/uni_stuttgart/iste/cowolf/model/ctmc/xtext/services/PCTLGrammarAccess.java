/*
* generated by Xtext
*/
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PCTLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartCommentedRuleParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartStartParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		
		//Start:
		//	start=CommentedRule start=Start?;
		public ParserRule getRule() { return rule; }

		//start=CommentedRule start=Start?
		public Group getGroup() { return cGroup; }

		//start=CommentedRule
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//CommentedRule
		public RuleCall getStartCommentedRuleParserRuleCall_0_0() { return cStartCommentedRuleParserRuleCall_0_0; }

		//start=Start?
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//Start
		public RuleCall getStartStartParserRuleCall_1_0() { return cStartStartParserRuleCall_1_0; }
	}

	public class CommentedRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentedRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulePctlParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//CommentedRule:
		//	comment=SL_COMMENT? rule=Pctl;
		public ParserRule getRule() { return rule; }

		//comment=SL_COMMENT? rule=Pctl
		public Group getGroup() { return cGroup; }

		//comment=SL_COMMENT?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0() { return cCommentSL_COMMENTTerminalRuleCall_0_0; }

		//rule=Pctl
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }

		//Pctl
		public RuleCall getRulePctlParserRuleCall_1_0() { return cRulePctlParserRuleCall_1_0; }
	}

	public class PctlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pctl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSteadyStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuantifiedProbabilityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Pctl:
		//	StateFormula | SteadyState | QuantifiedProbability;
		public ParserRule getRule() { return rule; }

		//StateFormula | SteadyState | QuantifiedProbability
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_0() { return cStateFormulaParserRuleCall_0; }

		//SteadyState
		public RuleCall getSteadyStateParserRuleCall_1() { return cSteadyStateParserRuleCall_1; }

		//QuantifiedProbability
		public RuleCall getQuantifiedProbabilityParserRuleCall_2() { return cQuantifiedProbabilityParserRuleCall_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//State:
		//	"State:" name=ID;
		public ParserRule getRule() { return rule; }

		//"State:" name=ID
		public Group getGroup() { return cGroup; }

		//"State:"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Label:
		//	"Label:" name=ID;
		public ParserRule getRule() { return rule; }

		//"Label:" name=ID
		public Group getGroup() { return cGroup; }

		//"Label:"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atomic:
		//	State | Label | BOOL;
		public ParserRule getRule() { return rule; }

		//State | Label | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2() { return cBOOLTerminalRuleCall_2; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Negation returns Expression:
		//	"!" StateFormula;
		public ParserRule getRule() { return rule; }

		//"!" StateFormula
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }
	}

	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Junction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisjunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Junction returns Expression:
		//	Conjunction | Disjunction;
		public ParserRule getRule() { return rule; }

		//Conjunction | Disjunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }

		//Disjunction
		public RuleCall getDisjunctionParserRuleCall_1() { return cDisjunctionParserRuleCall_1; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cConjunctionLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAmpersandKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//Conjunction returns Expression:
		//	"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*;
		public ParserRule getRule() { return rule; }

		//"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }

		//({Conjunction.left=current} "&" right=StateFormula)*
		public Group getGroup_2() { return cGroup_2; }

		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_2_0() { return cConjunctionLeftAction_2_0; }

		//"&"
		public Keyword getAmpersandKeyword_2_1() { return cAmpersandKeyword_2_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_2_0() { return cRightStateFormulaParserRuleCall_2_2_0; }
	}

	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cDisjunctionLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//Disjunction returns Expression:
		//	"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*;
		public ParserRule getRule() { return rule; }

		//"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }

		//({Disjunction.left=current} "|" right=StateFormula)*
		public Group getGroup_2() { return cGroup_2; }

		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_2_0() { return cDisjunctionLeftAction_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_2_0() { return cRightStateFormulaParserRuleCall_2_2_0; }
	}

	public class StateFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftStateFormulaParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightJunctionParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cNegationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cLeftProbabilityParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		
		//StateFormula returns Expression:
		//	"(" left=StateFormula right=Junction? ")" | Negation | Atomic | left=Probability;
		public ParserRule getRule() { return rule; }

		//"(" left=StateFormula right=Junction? ")" | Negation | Atomic | left=Probability
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" left=StateFormula right=Junction? ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//left=StateFormula
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }

		//StateFormula
		public RuleCall getLeftStateFormulaParserRuleCall_0_1_0() { return cLeftStateFormulaParserRuleCall_0_1_0; }

		//right=Junction?
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//Junction
		public RuleCall getRightJunctionParserRuleCall_0_2_0() { return cRightJunctionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//Negation
		public RuleCall getNegationParserRuleCall_1() { return cNegationParserRuleCall_1; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }

		//left=Probability
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }

		//Probability
		public RuleCall getLeftProbabilityParserRuleCall_3_0() { return cLeftProbabilityParserRuleCall_3_0; }
	}

	public class PathFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUntilParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFutureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGloballyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PathFormula returns Expression:
		//	Next | Until | Future | Globally;
		public ParserRule getRule() { return rule; }

		//Next | Until | Future | Globally
		public Alternatives getAlternatives() { return cAlternatives; }

		//Next
		public RuleCall getNextParserRuleCall_0() { return cNextParserRuleCall_0; }

		//Until
		public RuleCall getUntilParserRuleCall_1() { return cUntilParserRuleCall_1; }

		//Future
		public RuleCall getFutureParserRuleCall_2() { return cFutureParserRuleCall_2; }

		//Globally
		public RuleCall getGloballyParserRuleCall_3() { return cGloballyParserRuleCall_3; }
	}

	public class SteadyStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SteadyState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cCompareProbabilityParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cStateFormulaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SteadyState:
		//	"S" (CompareProbability | "=?") "[" StateFormula "]";
		public ParserRule getRule() { return rule; }

		//"S" (CompareProbability | "=?") "[" StateFormula "]"
		public Group getGroup() { return cGroup; }

		//"S"
		public Keyword getSKeyword_0() { return cSKeyword_0; }

		//CompareProbability | "=?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//CompareProbability
		public RuleCall getCompareProbabilityParserRuleCall_1_0() { return cCompareProbabilityParserRuleCall_1_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_1_1() { return cEqualsSignQuestionMarkKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_3() { return cStateFormulaParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class QuantifiedProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifiedProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathFormulaParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QuantifiedProbability:
		//	("P" "=?") "[" PathFormula "]";
		public ParserRule getRule() { return rule; }

		//("P" "=?") "[" PathFormula "]"
		public Group getGroup() { return cGroup; }

		//"P" "=?"
		public Group getGroup_0() { return cGroup_0; }

		//"P"
		public Keyword getPKeyword_0_0() { return cPKeyword_0_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//PathFormula
		public RuleCall getPathFormulaParserRuleCall_2() { return cPathFormulaParserRuleCall_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Probability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCompareProbabilityParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathFormulaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Probability:
		//	"P" CompareProbability "[" PathFormula "]";
		public ParserRule getRule() { return rule; }

		//"P" CompareProbability "[" PathFormula "]"
		public Group getGroup() { return cGroup; }

		//"P"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//CompareProbability
		public RuleCall getCompareProbabilityParserRuleCall_1() { return cCompareProbabilityParserRuleCall_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//PathFormula
		public RuleCall getPathFormulaParserRuleCall_3() { return cPathFormulaParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class UntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Until");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftStateFormulaParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final RuleCall cTimeBoundParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightStateFormulaParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Until:
		//	left=StateFormula ("U" | "W" | "R") TimeBound? right=StateFormula;
		public ParserRule getRule() { return rule; }

		//left=StateFormula ("U" | "W" | "R") TimeBound? right=StateFormula
		public Group getGroup() { return cGroup; }

		//left=StateFormula
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//StateFormula
		public RuleCall getLeftStateFormulaParserRuleCall_0_0() { return cLeftStateFormulaParserRuleCall_0_0; }

		//"U" | "W" | "R"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"U"
		public Keyword getUKeyword_1_0() { return cUKeyword_1_0; }

		//"W"
		public Keyword getWKeyword_1_1() { return cWKeyword_1_1; }

		//"R"
		public Keyword getRKeyword_1_2() { return cRKeyword_1_2; }

		//TimeBound?
		public RuleCall getTimeBoundParserRuleCall_2() { return cTimeBoundParserRuleCall_2; }

		//right=StateFormula
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_3_0() { return cRightStateFormulaParserRuleCall_3_0; }
	}

	public class NextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Next");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTimeBoundParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Next:
		//	"X" TimeBound? right=StateFormula;
		public ParserRule getRule() { return rule; }

		//"X" TimeBound? right=StateFormula
		public Group getGroup() { return cGroup; }

		//"X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//TimeBound?
		public RuleCall getTimeBoundParserRuleCall_1() { return cTimeBoundParserRuleCall_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_0() { return cRightStateFormulaParserRuleCall_2_0; }
	}

	public class FutureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Future");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTimeBoundParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Future:
		//	"F" TimeBound? right=StateFormula;
		public ParserRule getRule() { return rule; }

		//"F" TimeBound? right=StateFormula
		public Group getGroup() { return cGroup; }

		//"F"
		public Keyword getFKeyword_0() { return cFKeyword_0; }

		//TimeBound?
		public RuleCall getTimeBoundParserRuleCall_1() { return cTimeBoundParserRuleCall_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_0() { return cRightStateFormulaParserRuleCall_2_0; }
	}

	public class GloballyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Globally");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTimeBoundParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Globally:
		//	"G" TimeBound? right=StateFormula;
		public ParserRule getRule() { return rule; }

		//"G" TimeBound? right=StateFormula
		public Group getGroup() { return cGroup; }

		//"G"
		public Keyword getGKeyword_0() { return cGKeyword_0; }

		//TimeBound?
		public RuleCall getTimeBoundParserRuleCall_1() { return cTimeBoundParserRuleCall_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_0() { return cRightStateFormulaParserRuleCall_2_0; }
	}

	public class CompareProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final RuleCall cDECIMALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CompareProbability:
		//	(">" "="? | "<" "="?) DECIMAL;
		public ParserRule getRule() { return rule; }

		//(">" "="? | "<" "="?) DECIMAL
		public Group getGroup() { return cGroup; }

		//">" "="? | "<" "="?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//">" "="?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0_0() { return cGreaterThanSignKeyword_0_0_0; }

		//"="?
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }

		//"<" "="?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1_0() { return cLessThanSignKeyword_0_1_0; }

		//"="?
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1() { return cDECIMALTerminalRuleCall_1; }
	}

	public class TimeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0_0_0 = (Keyword)cGroup_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cDECIMALTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cDECIMALTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//TimeBound:
		//	(">" "="? | "<" "="? | "=") DECIMAL | "[" DECIMAL "," DECIMAL "]";
		public ParserRule getRule() { return rule; }

		//(">" "="? | "<" "="? | "=") DECIMAL | "[" DECIMAL "," DECIMAL "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(">" "="? | "<" "="? | "=") DECIMAL
		public Group getGroup_0() { return cGroup_0; }

		//">" "="? | "<" "="? | "="
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//">" "="?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0_0_0() { return cGreaterThanSignKeyword_0_0_0_0; }

		//"="?
		public Keyword getEqualsSignKeyword_0_0_0_1() { return cEqualsSignKeyword_0_0_0_1; }

		//"<" "="?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0_1_0() { return cLessThanSignKeyword_0_0_1_0; }

		//"="?
		public Keyword getEqualsSignKeyword_0_0_1_1() { return cEqualsSignKeyword_0_0_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_0_2() { return cEqualsSignKeyword_0_0_2; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_0_1() { return cDECIMALTerminalRuleCall_0_1; }

		//"[" DECIMAL "," DECIMAL "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1() { return cDECIMALTerminalRuleCall_1_1; }

		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_3() { return cDECIMALTerminalRuleCall_1_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	
	
	private StartElements pStart;
	private TerminalRule tBOOL;
	private TerminalRule tDECIMAL;
	private CommentedRuleElements pCommentedRule;
	private PctlElements pPctl;
	private StateElements pState;
	private LabelElements pLabel;
	private AtomicElements pAtomic;
	private NegationElements pNegation;
	private JunctionElements pJunction;
	private ConjunctionElements pConjunction;
	private DisjunctionElements pDisjunction;
	private StateFormulaElements pStateFormula;
	private PathFormulaElements pPathFormula;
	private SteadyStateElements pSteadyState;
	private QuantifiedProbabilityElements pQuantifiedProbability;
	private ProbabilityElements pProbability;
	private UntilElements pUntil;
	private NextElements pNext;
	private FutureElements pFuture;
	private GloballyElements pGlobally;
	private CompareProbabilityElements pCompareProbability;
	private TimeBoundElements pTimeBound;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PCTLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.PCTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//	start=CommentedRule start=Start?;
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal DECIMAL:
	//	INT ("." INT)? | "." INT;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//CommentedRule:
	//	comment=SL_COMMENT? rule=Pctl;
	public CommentedRuleElements getCommentedRuleAccess() {
		return (pCommentedRule != null) ? pCommentedRule : (pCommentedRule = new CommentedRuleElements());
	}
	
	public ParserRule getCommentedRuleRule() {
		return getCommentedRuleAccess().getRule();
	}

	//Pctl:
	//	StateFormula | SteadyState | QuantifiedProbability;
	public PctlElements getPctlAccess() {
		return (pPctl != null) ? pPctl : (pPctl = new PctlElements());
	}
	
	public ParserRule getPctlRule() {
		return getPctlAccess().getRule();
	}

	//State:
	//	"State:" name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Label:
	//	"Label:" name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Atomic:
	//	State | Label | BOOL;
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//Negation returns Expression:
	//	"!" StateFormula;
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Junction returns Expression:
	//	Conjunction | Disjunction;
	public JunctionElements getJunctionAccess() {
		return (pJunction != null) ? pJunction : (pJunction = new JunctionElements());
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}

	//Conjunction returns Expression:
	//	"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Disjunction returns Expression:
	//	"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*;
	public DisjunctionElements getDisjunctionAccess() {
		return (pDisjunction != null) ? pDisjunction : (pDisjunction = new DisjunctionElements());
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//StateFormula returns Expression:
	//	"(" left=StateFormula right=Junction? ")" | Negation | Atomic | left=Probability;
	public StateFormulaElements getStateFormulaAccess() {
		return (pStateFormula != null) ? pStateFormula : (pStateFormula = new StateFormulaElements());
	}
	
	public ParserRule getStateFormulaRule() {
		return getStateFormulaAccess().getRule();
	}

	//PathFormula returns Expression:
	//	Next | Until | Future | Globally;
	public PathFormulaElements getPathFormulaAccess() {
		return (pPathFormula != null) ? pPathFormula : (pPathFormula = new PathFormulaElements());
	}
	
	public ParserRule getPathFormulaRule() {
		return getPathFormulaAccess().getRule();
	}

	//SteadyState:
	//	"S" (CompareProbability | "=?") "[" StateFormula "]";
	public SteadyStateElements getSteadyStateAccess() {
		return (pSteadyState != null) ? pSteadyState : (pSteadyState = new SteadyStateElements());
	}
	
	public ParserRule getSteadyStateRule() {
		return getSteadyStateAccess().getRule();
	}

	//QuantifiedProbability:
	//	("P" "=?") "[" PathFormula "]";
	public QuantifiedProbabilityElements getQuantifiedProbabilityAccess() {
		return (pQuantifiedProbability != null) ? pQuantifiedProbability : (pQuantifiedProbability = new QuantifiedProbabilityElements());
	}
	
	public ParserRule getQuantifiedProbabilityRule() {
		return getQuantifiedProbabilityAccess().getRule();
	}

	//Probability:
	//	"P" CompareProbability "[" PathFormula "]";
	public ProbabilityElements getProbabilityAccess() {
		return (pProbability != null) ? pProbability : (pProbability = new ProbabilityElements());
	}
	
	public ParserRule getProbabilityRule() {
		return getProbabilityAccess().getRule();
	}

	//Until:
	//	left=StateFormula ("U" | "W" | "R") TimeBound? right=StateFormula;
	public UntilElements getUntilAccess() {
		return (pUntil != null) ? pUntil : (pUntil = new UntilElements());
	}
	
	public ParserRule getUntilRule() {
		return getUntilAccess().getRule();
	}

	//Next:
	//	"X" TimeBound? right=StateFormula;
	public NextElements getNextAccess() {
		return (pNext != null) ? pNext : (pNext = new NextElements());
	}
	
	public ParserRule getNextRule() {
		return getNextAccess().getRule();
	}

	//Future:
	//	"F" TimeBound? right=StateFormula;
	public FutureElements getFutureAccess() {
		return (pFuture != null) ? pFuture : (pFuture = new FutureElements());
	}
	
	public ParserRule getFutureRule() {
		return getFutureAccess().getRule();
	}

	//Globally:
	//	"G" TimeBound? right=StateFormula;
	public GloballyElements getGloballyAccess() {
		return (pGlobally != null) ? pGlobally : (pGlobally = new GloballyElements());
	}
	
	public ParserRule getGloballyRule() {
		return getGloballyAccess().getRule();
	}

	//CompareProbability:
	//	(">" "="? | "<" "="?) DECIMAL;
	public CompareProbabilityElements getCompareProbabilityAccess() {
		return (pCompareProbability != null) ? pCompareProbability : (pCompareProbability = new CompareProbabilityElements());
	}
	
	public ParserRule getCompareProbabilityRule() {
		return getCompareProbabilityAccess().getRule();
	}

	//TimeBound:
	//	(">" "="? | "<" "="? | "=") DECIMAL | "[" DECIMAL "," DECIMAL "]";
	public TimeBoundElements getTimeBoundAccess() {
		return (pTimeBound != null) ? pTimeBound : (pTimeBound = new TimeBoundElements());
	}
	
	public ParserRule getTimeBoundRule() {
		return getTimeBoundAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
