/*
* generated by Xtext
*/
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PCTLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStartSParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final RuleCall cP1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Start:
		//	start=S | P1;
		public ParserRule getRule() { return rule; }

		//start=S | P1
		public Alternatives getAlternatives() { return cAlternatives; }

		//start=S
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//S
		public RuleCall getStartSParserRuleCall_0_0() { return cStartSParserRuleCall_0_0; }

		//P1
		public RuleCall getP1ParserRuleCall_1() { return cP1ParserRuleCall_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cStateKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//State:
		//	"(" "State:" name=ID ")" | "State:" name=ID;
		public ParserRule getRule() { return rule; }

		//"(" "State:" name=ID ")" | "State:" name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" "State:" name=ID ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//"State:"
		public Keyword getStateKeyword_0_1() { return cStateKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"State:" name=ID
		public Group getGroup_1() { return cGroup_1; }

		//"State:"
		public Keyword getStateKeyword_1_0() { return cStateKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLabelKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLabelKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Label:
		//	"(" "Label:" name=ID ")" | "Label:" name=ID;
		public ParserRule getRule() { return rule; }

		//"(" "Label:" name=ID ")" | "Label:" name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" "Label:" name=ID ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//"Label:"
		public Keyword getLabelKeyword_0_1() { return cLabelKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"Label:" name=ID
		public Group getGroup_1() { return cGroup_1; }

		//"Label:"
		public Keyword getLabelKeyword_1_0() { return cLabelKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class StateOrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateOrLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StateOrLabel:
		//	State | Label;
		public ParserRule getRule() { return rule; }

		//State | Label
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}

	public class SElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "S");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCompareParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cStateOrLabelParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//S:
		//	"S" Compare "[" StateOrLabel "]";
		public ParserRule getRule() { return rule; }

		//"S" Compare "[" StateOrLabel "]"
		public Group getGroup() { return cGroup; }

		//"S"
		public Keyword getSKeyword_0() { return cSKeyword_0; }

		//Compare
		public RuleCall getCompareParserRuleCall_1() { return cCompareParserRuleCall_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//StateOrLabel
		public RuleCall getStateOrLabelParserRuleCall_3() { return cStateOrLabelParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class P1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "P1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCompareParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cPParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cFParserRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cUParserRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cGParserRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final Group cGroup_3_5 = (Group)cAlternatives_3.eContents().get(5);
		private final RuleCall cXParserRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final RuleCall cStateOrLabelParserRuleCall_3_5_1 = (RuleCall)cGroup_3_5.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//P1:
		//	"P" Compare "[" (P | S | F | U | G | X StateOrLabel) "]";
		public ParserRule getRule() { return rule; }

		//"P" Compare "[" (P | S | F | U | G | X StateOrLabel) "]"
		public Group getGroup() { return cGroup; }

		//"P"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//Compare
		public RuleCall getCompareParserRuleCall_1() { return cCompareParserRuleCall_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//P | S | F | U | G | X StateOrLabel
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//P
		public RuleCall getPParserRuleCall_3_0() { return cPParserRuleCall_3_0; }

		//S
		public RuleCall getSParserRuleCall_3_1() { return cSParserRuleCall_3_1; }

		//F
		public RuleCall getFParserRuleCall_3_2() { return cFParserRuleCall_3_2; }

		//U
		public RuleCall getUParserRuleCall_3_3() { return cUParserRuleCall_3_3; }

		//G
		public RuleCall getGParserRuleCall_3_4() { return cGParserRuleCall_3_4; }

		//X StateOrLabel
		public Group getGroup_3_5() { return cGroup_3_5; }

		//X
		public RuleCall getXParserRuleCall_3_5_0() { return cXParserRuleCall_3_5_0; }

		//StateOrLabel
		public RuleCall getStateOrLabelParserRuleCall_3_5_1() { return cStateOrLabelParserRuleCall_3_5_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "P");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCompareWithoutUnknownParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cPParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cFParserRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cUParserRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cGParserRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final Group cGroup_3_5 = (Group)cAlternatives_3.eContents().get(5);
		private final RuleCall cXParserRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final RuleCall cStateOrLabelParserRuleCall_3_5_1 = (RuleCall)cGroup_3_5.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//P:
		//	"P" CompareWithoutUnknown "[" (P | S | F | U | G | X StateOrLabel) "]";
		public ParserRule getRule() { return rule; }

		//"P" CompareWithoutUnknown "[" (P | S | F | U | G | X StateOrLabel) "]"
		public Group getGroup() { return cGroup; }

		//"P"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//CompareWithoutUnknown
		public RuleCall getCompareWithoutUnknownParserRuleCall_1() { return cCompareWithoutUnknownParserRuleCall_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//P | S | F | U | G | X StateOrLabel
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//P
		public RuleCall getPParserRuleCall_3_0() { return cPParserRuleCall_3_0; }

		//S
		public RuleCall getSParserRuleCall_3_1() { return cSParserRuleCall_3_1; }

		//F
		public RuleCall getFParserRuleCall_3_2() { return cFParserRuleCall_3_2; }

		//U
		public RuleCall getUParserRuleCall_3_3() { return cUParserRuleCall_3_3; }

		//G
		public RuleCall getGParserRuleCall_3_4() { return cGParserRuleCall_3_4; }

		//X StateOrLabel
		public Group getGroup_3_5() { return cGroup_3_5; }

		//X
		public RuleCall getXParserRuleCall_3_5_0() { return cXParserRuleCall_3_5_0; }

		//StateOrLabel
		public RuleCall getStateOrLabelParserRuleCall_3_5_1() { return cStateOrLabelParserRuleCall_3_5_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "X");
		private final Keyword cXKeyword = (Keyword)rule.eContents().get(1);
		
		//X:
		//	"X"*;
		public ParserRule getRule() { return rule; }

		//"X"*
		public Keyword getXKeyword() { return cXKeyword; }
	}

	public class FElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "F");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTimeBoundParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cXParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRIGHTAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRIGHTStateOrLabelParserRuleCall_2_0 = (RuleCall)cRIGHTAssignment_2.eContents().get(0);
		
		//F:
		//	"F" (TimeBound X) RIGHT=StateOrLabel;
		public ParserRule getRule() { return rule; }

		//"F" (TimeBound X) RIGHT=StateOrLabel
		public Group getGroup() { return cGroup; }

		//"F"
		public Keyword getFKeyword_0() { return cFKeyword_0; }

		//TimeBound X
		public Group getGroup_1() { return cGroup_1; }

		//TimeBound
		public RuleCall getTimeBoundParserRuleCall_1_0() { return cTimeBoundParserRuleCall_1_0; }

		//X
		public RuleCall getXParserRuleCall_1_1() { return cXParserRuleCall_1_1; }

		//RIGHT=StateOrLabel
		public Assignment getRIGHTAssignment_2() { return cRIGHTAssignment_2; }

		//StateOrLabel
		public RuleCall getRIGHTStateOrLabelParserRuleCall_2_0() { return cRIGHTStateOrLabelParserRuleCall_2_0; }
	}

	public class GElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "G");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTimeBoundParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cXParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLEFTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLEFTStateOrLabelParserRuleCall_3_0 = (RuleCall)cLEFTAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRIGHTAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRIGHTPParserRuleCall_5_0 = (RuleCall)cRIGHTAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//G:
		//	"G" (TimeBound X) "(" LEFT=StateOrLabel "=>" RIGHT=P ")";
		public ParserRule getRule() { return rule; }

		//"G" (TimeBound X) "(" LEFT=StateOrLabel "=>" RIGHT=P ")"
		public Group getGroup() { return cGroup; }

		//"G"
		public Keyword getGKeyword_0() { return cGKeyword_0; }

		//TimeBound X
		public Group getGroup_1() { return cGroup_1; }

		//TimeBound
		public RuleCall getTimeBoundParserRuleCall_1_0() { return cTimeBoundParserRuleCall_1_0; }

		//X
		public RuleCall getXParserRuleCall_1_1() { return cXParserRuleCall_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//LEFT=StateOrLabel
		public Assignment getLEFTAssignment_3() { return cLEFTAssignment_3; }

		//StateOrLabel
		public RuleCall getLEFTStateOrLabelParserRuleCall_3_0() { return cLEFTStateOrLabelParserRuleCall_3_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//RIGHT=P
		public Assignment getRIGHTAssignment_5() { return cRIGHTAssignment_5; }

		//P
		public RuleCall getRIGHTPParserRuleCall_5_0() { return cRIGHTPParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class UElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "U");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLEFTAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLEFTStateOrLabelParserRuleCall_0_0 = (RuleCall)cLEFTAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cWKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cTimeBoundParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cXParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cRIGHTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRIGHTStateOrLabelParserRuleCall_3_0 = (RuleCall)cRIGHTAssignment_3.eContents().get(0);
		
		//U:
		//	LEFT=StateOrLabel ("U" | "W" | "R") (TimeBound X) RIGHT=StateOrLabel;
		public ParserRule getRule() { return rule; }

		//LEFT=StateOrLabel ("U" | "W" | "R") (TimeBound X) RIGHT=StateOrLabel
		public Group getGroup() { return cGroup; }

		//LEFT=StateOrLabel
		public Assignment getLEFTAssignment_0() { return cLEFTAssignment_0; }

		//StateOrLabel
		public RuleCall getLEFTStateOrLabelParserRuleCall_0_0() { return cLEFTStateOrLabelParserRuleCall_0_0; }

		//"U" | "W" | "R"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"U"
		public Keyword getUKeyword_1_0() { return cUKeyword_1_0; }

		//"W"
		public Keyword getWKeyword_1_1() { return cWKeyword_1_1; }

		//"R"
		public Keyword getRKeyword_1_2() { return cRKeyword_1_2; }

		//TimeBound X
		public Group getGroup_2() { return cGroup_2; }

		//TimeBound
		public RuleCall getTimeBoundParserRuleCall_2_0() { return cTimeBoundParserRuleCall_2_0; }

		//X
		public RuleCall getXParserRuleCall_2_1() { return cXParserRuleCall_2_1; }

		//RIGHT=StateOrLabel
		public Assignment getRIGHTAssignment_3() { return cRIGHTAssignment_3; }

		//StateOrLabel
		public RuleCall getRIGHTStateOrLabelParserRuleCall_3_0() { return cRIGHTStateOrLabelParserRuleCall_3_0; }
	}

	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompareWithoutUnknownParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Compare:
		//	CompareWithoutUnknown | "=?";
		public ParserRule getRule() { return rule; }

		//CompareWithoutUnknown | "=?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompareWithoutUnknown
		public RuleCall getCompareWithoutUnknownParserRuleCall_0() { return cCompareWithoutUnknownParserRuleCall_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_1() { return cEqualsSignQuestionMarkKeyword_1; }
	}

	public class CompareWithoutUnknownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareWithoutUnknown");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//CompareWithoutUnknown:
		//	">" DECIMAL | "<" DECIMAL | ">=" DECIMAL | "<=" DECIMAL;
		public ParserRule getRule() { return rule; }

		//">" DECIMAL | "<" DECIMAL | ">=" DECIMAL | "<=" DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//">" DECIMAL
		public Group getGroup_0() { return cGroup_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_0_1() { return cDECIMALParserRuleCall_0_1; }

		//"<" DECIMAL
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_1_1() { return cDECIMALParserRuleCall_1_1; }

		//">=" DECIMAL
		public Group getGroup_2() { return cGroup_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2_0() { return cGreaterThanSignEqualsSignKeyword_2_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_2_1() { return cDECIMALParserRuleCall_2_1; }

		//"<=" DECIMAL
		public Group getGroup_3() { return cGroup_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3_0() { return cLessThanSignEqualsSignKeyword_3_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_3_1() { return cDECIMALParserRuleCall_3_1; }
	}

	public class TimeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cDECIMALParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//TimeBound:
		//	(">=" DECIMAL | "<=" DECIMAL | "=" DECIMAL | "[" DECIMAL "," DECIMAL "]")?;
		public ParserRule getRule() { return rule; }

		//(">=" DECIMAL | "<=" DECIMAL | "=" DECIMAL | "[" DECIMAL "," DECIMAL "]")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//">=" DECIMAL
		public Group getGroup_0() { return cGroup_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0_0() { return cGreaterThanSignEqualsSignKeyword_0_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_0_1() { return cDECIMALParserRuleCall_0_1; }

		//"<=" DECIMAL
		public Group getGroup_1() { return cGroup_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0() { return cLessThanSignEqualsSignKeyword_1_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_1_1() { return cDECIMALParserRuleCall_1_1; }

		//"=" DECIMAL
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_2_1() { return cDECIMALParserRuleCall_2_1; }

		//"[" DECIMAL "," DECIMAL "]"
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_3_1() { return cDECIMALParserRuleCall_3_1; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_3_3() { return cDECIMALParserRuleCall_3_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
	}

	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DECIMAL:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private StartElements pStart;
	private StateElements pState;
	private LabelElements pLabel;
	private StateOrLabelElements pStateOrLabel;
	private SElements pS;
	private P1Elements pP1;
	private PElements pP;
	private XElements pX;
	private FElements pF;
	private GElements pG;
	private UElements pU;
	private CompareElements pCompare;
	private CompareWithoutUnknownElements pCompareWithoutUnknown;
	private TimeBoundElements pTimeBound;
	private DECIMALElements pDECIMAL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PCTLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.PCTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//	start=S | P1;
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//State:
	//	"(" "State:" name=ID ")" | "State:" name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Label:
	//	"(" "Label:" name=ID ")" | "Label:" name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//StateOrLabel:
	//	State | Label;
	public StateOrLabelElements getStateOrLabelAccess() {
		return (pStateOrLabel != null) ? pStateOrLabel : (pStateOrLabel = new StateOrLabelElements());
	}
	
	public ParserRule getStateOrLabelRule() {
		return getStateOrLabelAccess().getRule();
	}

	//S:
	//	"S" Compare "[" StateOrLabel "]";
	public SElements getSAccess() {
		return (pS != null) ? pS : (pS = new SElements());
	}
	
	public ParserRule getSRule() {
		return getSAccess().getRule();
	}

	//P1:
	//	"P" Compare "[" (P | S | F | U | G | X StateOrLabel) "]";
	public P1Elements getP1Access() {
		return (pP1 != null) ? pP1 : (pP1 = new P1Elements());
	}
	
	public ParserRule getP1Rule() {
		return getP1Access().getRule();
	}

	//P:
	//	"P" CompareWithoutUnknown "[" (P | S | F | U | G | X StateOrLabel) "]";
	public PElements getPAccess() {
		return (pP != null) ? pP : (pP = new PElements());
	}
	
	public ParserRule getPRule() {
		return getPAccess().getRule();
	}

	//X:
	//	"X"*;
	public XElements getXAccess() {
		return (pX != null) ? pX : (pX = new XElements());
	}
	
	public ParserRule getXRule() {
		return getXAccess().getRule();
	}

	//F:
	//	"F" (TimeBound X) RIGHT=StateOrLabel;
	public FElements getFAccess() {
		return (pF != null) ? pF : (pF = new FElements());
	}
	
	public ParserRule getFRule() {
		return getFAccess().getRule();
	}

	//G:
	//	"G" (TimeBound X) "(" LEFT=StateOrLabel "=>" RIGHT=P ")";
	public GElements getGAccess() {
		return (pG != null) ? pG : (pG = new GElements());
	}
	
	public ParserRule getGRule() {
		return getGAccess().getRule();
	}

	//U:
	//	LEFT=StateOrLabel ("U" | "W" | "R") (TimeBound X) RIGHT=StateOrLabel;
	public UElements getUAccess() {
		return (pU != null) ? pU : (pU = new UElements());
	}
	
	public ParserRule getURule() {
		return getUAccess().getRule();
	}

	//Compare:
	//	CompareWithoutUnknown | "=?";
	public CompareElements getCompareAccess() {
		return (pCompare != null) ? pCompare : (pCompare = new CompareElements());
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}

	//CompareWithoutUnknown:
	//	">" DECIMAL | "<" DECIMAL | ">=" DECIMAL | "<=" DECIMAL;
	public CompareWithoutUnknownElements getCompareWithoutUnknownAccess() {
		return (pCompareWithoutUnknown != null) ? pCompareWithoutUnknown : (pCompareWithoutUnknown = new CompareWithoutUnknownElements());
	}
	
	public ParserRule getCompareWithoutUnknownRule() {
		return getCompareWithoutUnknownAccess().getRule();
	}

	//TimeBound:
	//	(">=" DECIMAL | "<=" DECIMAL | "=" DECIMAL | "[" DECIMAL "," DECIMAL "]")?;
	public TimeBoundElements getTimeBoundAccess() {
		return (pTimeBound != null) ? pTimeBound : (pTimeBound = new TimeBoundElements());
	}
	
	public ParserRule getTimeBoundRule() {
		return getTimeBoundAccess().getRule();
	}

	//DECIMAL:
	//	INT ("." INT)?;
	public DECIMALElements getDECIMALAccess() {
		return (pDECIMAL != null) ? pDECIMAL : (pDECIMAL = new DECIMALElements());
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
