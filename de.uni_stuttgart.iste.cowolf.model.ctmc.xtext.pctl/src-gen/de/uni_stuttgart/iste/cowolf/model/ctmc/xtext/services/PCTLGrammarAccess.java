/*
* generated by Xtext
*/
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PCTLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleFragmentParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//Start:
		//	{Start} rule+=Fragment*;
		public ParserRule getRule() { return rule; }

		//{Start} rule+=Fragment*
		public Group getGroup() { return cGroup; }

		//{Start}
		public Action getStartAction_0() { return cStartAction_0; }

		//rule+=Fragment*
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }

		//Fragment
		public RuleCall getRuleFragmentParserRuleCall_1_0() { return cRuleFragmentParserRuleCall_1_0; }
	}

	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Fragment:
		//	Comment | Rule;
		public ParserRule getRule() { return rule; }

		//Comment | Rule
		public Alternatives getAlternatives() { return cAlternatives; }

		//Comment
		public RuleCall getCommentParserRuleCall_0() { return cCommentParserRuleCall_0; }

		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//	comment=SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0() { return cCommentSL_COMMENTTerminalRuleCall_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSteadyStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuantifiedProbabilityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Rule hidden(WS):
		//	BooleanRule | SteadyState | QuantifiedProbability;
		public ParserRule getRule() { return rule; }

		//BooleanRule | SteadyState | QuantifiedProbability
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanRule
		public RuleCall getBooleanRuleParserRuleCall_0() { return cBooleanRuleParserRuleCall_0; }

		//SteadyState
		public RuleCall getSteadyStateParserRuleCall_1() { return cSteadyStateParserRuleCall_1; }

		//QuantifiedProbability
		public RuleCall getQuantifiedProbabilityParserRuleCall_2() { return cQuantifiedProbabilityParserRuleCall_2; }
	}

	public class SteadyStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SteadyState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBoundAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBoundCompareProbabilityParserRuleCall_2_0_0 = (RuleCall)cBoundAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueStateFormulaParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SteadyState:
		//	"S" SL_COMMENT* (bound=CompareProbability | "=?") SL_COMMENT* "[" SL_COMMENT* value=StateFormula SL_COMMENT* "]";
		public ParserRule getRule() { return rule; }

		//"S" SL_COMMENT* (bound=CompareProbability | "=?") SL_COMMENT* "[" SL_COMMENT* value=StateFormula SL_COMMENT* "]"
		public Group getGroup() { return cGroup; }

		//"S"
		public Keyword getSKeyword_0() { return cSKeyword_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//bound=CompareProbability | "=?"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//bound=CompareProbability
		public Assignment getBoundAssignment_2_0() { return cBoundAssignment_2_0; }

		//CompareProbability
		public RuleCall getBoundCompareProbabilityParserRuleCall_2_0_0() { return cBoundCompareProbabilityParserRuleCall_2_0_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_2_1() { return cEqualsSignQuestionMarkKeyword_2_1; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//value=StateFormula
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//StateFormula
		public RuleCall getValueStateFormulaParserRuleCall_6_0() { return cValueStateFormulaParserRuleCall_6_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_7() { return cSL_COMMENTTerminalRuleCall_7; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class QuantifiedProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifiedProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuePathFormulaParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QuantifiedProbability:
		//	"P" SL_COMMENT* "=?" SL_COMMENT* "[" value=PathFormula "]";
		public ParserRule getRule() { return rule; }

		//"P" SL_COMMENT* "=?" SL_COMMENT* "[" value=PathFormula "]"
		public Group getGroup() { return cGroup; }

		//"P"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_2() { return cEqualsSignQuestionMarkKeyword_2; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//value=PathFormula
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//PathFormula
		public RuleCall getValuePathFormulaParserRuleCall_5_0() { return cValuePathFormulaParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class BooleanRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanRule");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueStateFormulaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanRule:
		//	value=StateFormula;
		public ParserRule getRule() { return rule; }

		//value=StateFormula
		public Assignment getValueAssignment() { return cValueAssignment; }

		//StateFormula
		public RuleCall getValueStateFormulaParserRuleCall_0() { return cValueStateFormulaParserRuleCall_0; }
	}

	public class StateFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftStateFormulaParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cRightAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final RuleCall cRightJunctionParserRuleCall_0_3_0_0 = (RuleCall)cRightAssignment_0_3_0.eContents().get(0);
		private final Assignment cRightAssignment_0_3_1 = (Assignment)cAlternatives_0_3.eContents().get(1);
		private final RuleCall cRightImplicationParserRuleCall_0_3_1_0 = (RuleCall)cRightAssignment_0_3_1.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cLeftAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cLeftAlternatives_1_0 = (Alternatives)cLeftAssignment_1.eContents().get(0);
		private final RuleCall cLeftNegationParserRuleCall_1_0_0 = (RuleCall)cLeftAlternatives_1_0.eContents().get(0);
		private final RuleCall cLeftAtomicParserRuleCall_1_0_1 = (RuleCall)cLeftAlternatives_1_0.eContents().get(1);
		private final RuleCall cLeftProbabilityParserRuleCall_1_0_2 = (RuleCall)cLeftAlternatives_1_0.eContents().get(2);
		
		////###########################################################
		////#             State Formular expressions                  #
		////###########################################################
		//StateFormula:
		//	"(" SL_COMMENT* left=StateFormula (right=Junction | right=Implication)? SL_COMMENT* ")" | left=(Negation | Atomic |
		//	Probability);
		public ParserRule getRule() { return rule; }

		//"(" SL_COMMENT* left=StateFormula (right=Junction | right=Implication)? SL_COMMENT* ")" | left=(Negation | Atomic |
		//Probability)
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" SL_COMMENT* left=StateFormula (right=Junction | right=Implication)? SL_COMMENT* ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_0_1() { return cSL_COMMENTTerminalRuleCall_0_1; }

		//left=StateFormula
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }

		//StateFormula
		public RuleCall getLeftStateFormulaParserRuleCall_0_2_0() { return cLeftStateFormulaParserRuleCall_0_2_0; }

		//(right=Junction | right=Implication)?
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//right=Junction
		public Assignment getRightAssignment_0_3_0() { return cRightAssignment_0_3_0; }

		//Junction
		public RuleCall getRightJunctionParserRuleCall_0_3_0_0() { return cRightJunctionParserRuleCall_0_3_0_0; }

		//right=Implication
		public Assignment getRightAssignment_0_3_1() { return cRightAssignment_0_3_1; }

		//Implication
		public RuleCall getRightImplicationParserRuleCall_0_3_1_0() { return cRightImplicationParserRuleCall_0_3_1_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_0_4() { return cSL_COMMENTTerminalRuleCall_0_4; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//left=(Negation | Atomic | Probability)
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//Negation | Atomic | Probability
		public Alternatives getLeftAlternatives_1_0() { return cLeftAlternatives_1_0; }

		//Negation
		public RuleCall getLeftNegationParserRuleCall_1_0_0() { return cLeftNegationParserRuleCall_1_0_0; }

		//Atomic
		public RuleCall getLeftAtomicParserRuleCall_1_0_1() { return cLeftAtomicParserRuleCall_1_0_1; }

		//Probability
		public RuleCall getLeftProbabilityParserRuleCall_1_0_2() { return cLeftProbabilityParserRuleCall_1_0_2; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Negation returns StateExpression:
		//	"!" StateFormula;
		public ParserRule getRule() { return rule; }

		//"!" StateFormula
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }
	}

	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Junction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisjunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Junction returns RightStateExpression hidden(WS, SL_COMMENT):
		//	Conjunction | Disjunction;
		public ParserRule getRule() { return rule; }

		//Conjunction | Disjunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }

		//Disjunction
		public RuleCall getDisjunctionParserRuleCall_1() { return cDisjunctionParserRuleCall_1; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cConjunctionLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAmpersandKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//Conjunction returns RightStateExpression:
		//	"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*;
		public ParserRule getRule() { return rule; }

		//"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }

		//({Conjunction.left=current} "&" right=StateFormula)*
		public Group getGroup_2() { return cGroup_2; }

		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_2_0() { return cConjunctionLeftAction_2_0; }

		//"&"
		public Keyword getAmpersandKeyword_2_1() { return cAmpersandKeyword_2_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_2_0() { return cRightStateFormulaParserRuleCall_2_2_0; }
	}

	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStateFormulaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cDisjunctionLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightStateFormulaParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//Disjunction returns RightStateExpression:
		//	"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*;
		public ParserRule getRule() { return rule; }

		//"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//StateFormula
		public RuleCall getStateFormulaParserRuleCall_1() { return cStateFormulaParserRuleCall_1; }

		//({Disjunction.left=current} "|" right=StateFormula)*
		public Group getGroup_2() { return cGroup_2; }

		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_2_0() { return cDisjunctionLeftAction_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }

		//right=StateFormula
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_2_2_0() { return cRightStateFormulaParserRuleCall_2_2_0; }
	}

	public class ImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightStateFormulaParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Implication returns RightStateExpression hidden(WS, SL_COMMENT):
		//	"=>" right=StateFormula;
		public ParserRule getRule() { return rule; }

		//"=>" right=StateFormula
		public Group getGroup() { return cGroup; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }

		//right=StateFormula
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_1_0() { return cRightStateFormulaParserRuleCall_1_0; }
	}

	public class ProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Probability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Action cProbabilityAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cComparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparatorCompareProbabilityParserRuleCall_3_0 = (RuleCall)cComparatorAssignment_3.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPathAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathPathFormulaParserRuleCall_6_0 = (RuleCall)cPathAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Probability returns StateExpression:
		//	"P" SL_COMMENT* {Probability} comparator=CompareProbability SL_COMMENT* "[" path=PathFormula "]";
		public ParserRule getRule() { return rule; }

		//"P" SL_COMMENT* {Probability} comparator=CompareProbability SL_COMMENT* "[" path=PathFormula "]"
		public Group getGroup() { return cGroup; }

		//"P"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//{Probability}
		public Action getProbabilityAction_2() { return cProbabilityAction_2; }

		//comparator=CompareProbability
		public Assignment getComparatorAssignment_3() { return cComparatorAssignment_3; }

		//CompareProbability
		public RuleCall getComparatorCompareProbabilityParserRuleCall_3_0() { return cComparatorCompareProbabilityParserRuleCall_3_0; }

		//SL_COMMENT*
		public RuleCall getSL_COMMENTTerminalRuleCall_4() { return cSL_COMMENTTerminalRuleCall_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//path=PathFormula
		public Assignment getPathAssignment_6() { return cPathAssignment_6; }

		//PathFormula
		public RuleCall getPathPathFormulaParserRuleCall_6_0() { return cPathPathFormulaParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atomic returns StateExpression:
		//	State | Label | Boolean;
		public ParserRule getRule() { return rule; }

		//State | Label | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//State:
		//	"State:" value=STRING;
		public ParserRule getRule() { return rule; }

		//"State:" value=STRING
		public Group getGroup() { return cGroup; }

		//"State:"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Label:
		//	"Label:" value=STRING;
		public ParserRule getRule() { return rule; }

		//"Label:" value=STRING
		public Group getGroup() { return cGroup; }

		//"Label:"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Boolean:
		//	value=BOOL;
		public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}

	public class PathFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUntilParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFutureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGloballyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////###########################################################
		////#             Path Formular expressions                  #
		////###########################################################
		//PathFormula hidden(WS, SL_COMMENT):
		//	Next | Until | Future | Globally;
		public ParserRule getRule() { return rule; }

		//Next | Until | Future | Globally
		public Alternatives getAlternatives() { return cAlternatives; }

		//Next
		public RuleCall getNextParserRuleCall_0() { return cNextParserRuleCall_0; }

		//Until
		public RuleCall getUntilParserRuleCall_1() { return cUntilParserRuleCall_1; }

		//Future
		public RuleCall getFutureParserRuleCall_2() { return cFutureParserRuleCall_2; }

		//Globally
		public RuleCall getGloballyParserRuleCall_3() { return cGloballyParserRuleCall_3; }
	}

	public class UntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Until");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftStateFormulaParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeUKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeWKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cTypeRKeyword_1_0_2 = (Keyword)cTypeAlternatives_1_0.eContents().get(2);
		private final Assignment cBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoundTimeBoundParserRuleCall_2_0 = (RuleCall)cBoundAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightStateFormulaParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Until:
		//	left=StateFormula type=("U" | "W" | "R") bound=TimeBound? right=StateFormula;
		public ParserRule getRule() { return rule; }

		//left=StateFormula type=("U" | "W" | "R") bound=TimeBound? right=StateFormula
		public Group getGroup() { return cGroup; }

		//left=StateFormula
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//StateFormula
		public RuleCall getLeftStateFormulaParserRuleCall_0_0() { return cLeftStateFormulaParserRuleCall_0_0; }

		//type=("U" | "W" | "R")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"U" | "W" | "R"
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//"U"
		public Keyword getTypeUKeyword_1_0_0() { return cTypeUKeyword_1_0_0; }

		//"W"
		public Keyword getTypeWKeyword_1_0_1() { return cTypeWKeyword_1_0_1; }

		//"R"
		public Keyword getTypeRKeyword_1_0_2() { return cTypeRKeyword_1_0_2; }

		//bound=TimeBound?
		public Assignment getBoundAssignment_2() { return cBoundAssignment_2; }

		//TimeBound
		public RuleCall getBoundTimeBoundParserRuleCall_2_0() { return cBoundTimeBoundParserRuleCall_2_0; }

		//right=StateFormula
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//StateFormula
		public RuleCall getRightStateFormulaParserRuleCall_3_0() { return cRightStateFormulaParserRuleCall_3_0; }
	}

	public class NextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Next");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundTimeBoundParserRuleCall_1_0 = (RuleCall)cBoundAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStateFormulaParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Next:
		//	"X" bound=TimeBound? value=StateFormula;
		public ParserRule getRule() { return rule; }

		//"X" bound=TimeBound? value=StateFormula
		public Group getGroup() { return cGroup; }

		//"X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//bound=TimeBound?
		public Assignment getBoundAssignment_1() { return cBoundAssignment_1; }

		//TimeBound
		public RuleCall getBoundTimeBoundParserRuleCall_1_0() { return cBoundTimeBoundParserRuleCall_1_0; }

		//value=StateFormula
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StateFormula
		public RuleCall getValueStateFormulaParserRuleCall_2_0() { return cValueStateFormulaParserRuleCall_2_0; }
	}

	public class FutureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Future");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundTimeBoundParserRuleCall_1_0 = (RuleCall)cBoundAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStateFormulaParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Future:
		//	"F" bound=TimeBound? value=StateFormula;
		public ParserRule getRule() { return rule; }

		//"F" bound=TimeBound? value=StateFormula
		public Group getGroup() { return cGroup; }

		//"F"
		public Keyword getFKeyword_0() { return cFKeyword_0; }

		//bound=TimeBound?
		public Assignment getBoundAssignment_1() { return cBoundAssignment_1; }

		//TimeBound
		public RuleCall getBoundTimeBoundParserRuleCall_1_0() { return cBoundTimeBoundParserRuleCall_1_0; }

		//value=StateFormula
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StateFormula
		public RuleCall getValueStateFormulaParserRuleCall_2_0() { return cValueStateFormulaParserRuleCall_2_0; }
	}

	public class GloballyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Globally");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundTimeBoundParserRuleCall_1_0 = (RuleCall)cBoundAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStateFormulaParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Globally:
		//	"G" bound=TimeBound? value=StateFormula;
		public ParserRule getRule() { return rule; }

		//"G" bound=TimeBound? value=StateFormula
		public Group getGroup() { return cGroup; }

		//"G"
		public Keyword getGKeyword_0() { return cGKeyword_0; }

		//bound=TimeBound?
		public Assignment getBoundAssignment_1() { return cBoundAssignment_1; }

		//TimeBound
		public RuleCall getBoundTimeBoundParserRuleCall_1_0() { return cBoundTimeBoundParserRuleCall_1_0; }

		//value=StateFormula
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StateFormula
		public RuleCall getValueStateFormulaParserRuleCall_2_0() { return cValueStateFormulaParserRuleCall_2_0; }
	}

	public class CompareProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorCOMPARATORTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//CompareProbability hidden(WS, SL_COMMENT):
		//	operator=COMPARATOR value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//operator=COMPARATOR value=DOUBLE
		public Group getGroup() { return cGroup; }

		//operator=COMPARATOR
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//COMPARATOR
		public RuleCall getOperatorCOMPARATORTerminalRuleCall_0_0() { return cOperatorCOMPARATORTerminalRuleCall_0_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
	}

	public class TimeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0_0 = (Alternatives)cOperatorAssignment_0_0.eContents().get(0);
		private final RuleCall cOperatorCOMPARATORTerminalRuleCall_0_0_0_0 = (RuleCall)cOperatorAlternatives_0_0_0.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_0_0_0_1 = (Keyword)cOperatorAlternatives_0_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFromDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cFromAssignment_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cOperatorCommaKeyword_1_2_0 = (Keyword)cOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cToAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cToDOUBLETerminalRuleCall_1_3_0 = (RuleCall)cToAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//TimeBound hidden(WS, SL_COMMENT):
		//	operator=(COMPARATOR | "=") value=DOUBLE | "[" from=DOUBLE operator="," to=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//operator=(COMPARATOR | "=") value=DOUBLE | "[" from=DOUBLE operator="," to=DOUBLE "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//operator=(COMPARATOR | "=") value=DOUBLE
		public Group getGroup_0() { return cGroup_0; }

		//operator=(COMPARATOR | "=")
		public Assignment getOperatorAssignment_0_0() { return cOperatorAssignment_0_0; }

		//COMPARATOR | "="
		public Alternatives getOperatorAlternatives_0_0_0() { return cOperatorAlternatives_0_0_0; }

		//COMPARATOR
		public RuleCall getOperatorCOMPARATORTerminalRuleCall_0_0_0_0() { return cOperatorCOMPARATORTerminalRuleCall_0_0_0_0; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_0_0_0_1() { return cOperatorEqualsSignKeyword_0_0_0_1; }

		//value=DOUBLE
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0_1_0() { return cValueDOUBLETerminalRuleCall_0_1_0; }

		//"[" from=DOUBLE operator="," to=DOUBLE "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//from=DOUBLE
		public Assignment getFromAssignment_1_1() { return cFromAssignment_1_1; }

		//DOUBLE
		public RuleCall getFromDOUBLETerminalRuleCall_1_1_0() { return cFromDOUBLETerminalRuleCall_1_1_0; }

		//operator=","
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }

		//","
		public Keyword getOperatorCommaKeyword_1_2_0() { return cOperatorCommaKeyword_1_2_0; }

		//to=DOUBLE
		public Assignment getToAssignment_1_3() { return cToAssignment_1_3; }

		//DOUBLE
		public RuleCall getToDOUBLETerminalRuleCall_1_3_0() { return cToDOUBLETerminalRuleCall_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	
	
	private final StartElements pStart;
	private final TerminalRule tBOOL;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tCOMPARATOR;
	private final FragmentElements pFragment;
	private final CommentElements pComment;
	private final RuleElements pRule;
	private final SteadyStateElements pSteadyState;
	private final QuantifiedProbabilityElements pQuantifiedProbability;
	private final BooleanRuleElements pBooleanRule;
	private final StateFormulaElements pStateFormula;
	private final NegationElements pNegation;
	private final JunctionElements pJunction;
	private final ConjunctionElements pConjunction;
	private final DisjunctionElements pDisjunction;
	private final ImplicationElements pImplication;
	private final ProbabilityElements pProbability;
	private final AtomicElements pAtomic;
	private final StateElements pState;
	private final LabelElements pLabel;
	private final BooleanElements pBoolean;
	private final PathFormulaElements pPathFormula;
	private final UntilElements pUntil;
	private final NextElements pNext;
	private final FutureElements pFuture;
	private final GloballyElements pGlobally;
	private final CompareProbabilityElements pCompareProbability;
	private final TimeBoundElements pTimeBound;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PCTLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tCOMPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARATOR");
		this.pFragment = new FragmentElements();
		this.pComment = new CommentElements();
		this.pRule = new RuleElements();
		this.pSteadyState = new SteadyStateElements();
		this.pQuantifiedProbability = new QuantifiedProbabilityElements();
		this.pBooleanRule = new BooleanRuleElements();
		this.pStateFormula = new StateFormulaElements();
		this.pNegation = new NegationElements();
		this.pJunction = new JunctionElements();
		this.pConjunction = new ConjunctionElements();
		this.pDisjunction = new DisjunctionElements();
		this.pImplication = new ImplicationElements();
		this.pProbability = new ProbabilityElements();
		this.pAtomic = new AtomicElements();
		this.pState = new StateElements();
		this.pLabel = new LabelElements();
		this.pBoolean = new BooleanElements();
		this.pPathFormula = new PathFormulaElements();
		this.pUntil = new UntilElements();
		this.pNext = new NextElements();
		this.pFuture = new FutureElements();
		this.pGlobally = new GloballyElements();
		this.pCompareProbability = new CompareProbabilityElements();
		this.pTimeBound = new TimeBoundElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.PCTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//	{Start} rule+=Fragment*;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	INT ("." INT)? | "." INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal COMPARATOR:
	//	">" "="? | "<" "="?;
	public TerminalRule getCOMPARATORRule() {
		return tCOMPARATOR;
	} 

	//Fragment:
	//	Comment | Rule;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}

	//Comment:
	//	comment=SL_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Rule hidden(WS):
	//	BooleanRule | SteadyState | QuantifiedProbability;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//SteadyState:
	//	"S" SL_COMMENT* (bound=CompareProbability | "=?") SL_COMMENT* "[" SL_COMMENT* value=StateFormula SL_COMMENT* "]";
	public SteadyStateElements getSteadyStateAccess() {
		return pSteadyState;
	}
	
	public ParserRule getSteadyStateRule() {
		return getSteadyStateAccess().getRule();
	}

	//QuantifiedProbability:
	//	"P" SL_COMMENT* "=?" SL_COMMENT* "[" value=PathFormula "]";
	public QuantifiedProbabilityElements getQuantifiedProbabilityAccess() {
		return pQuantifiedProbability;
	}
	
	public ParserRule getQuantifiedProbabilityRule() {
		return getQuantifiedProbabilityAccess().getRule();
	}

	//BooleanRule:
	//	value=StateFormula;
	public BooleanRuleElements getBooleanRuleAccess() {
		return pBooleanRule;
	}
	
	public ParserRule getBooleanRuleRule() {
		return getBooleanRuleAccess().getRule();
	}

	////###########################################################
	////#             State Formular expressions                  #
	////###########################################################
	//StateFormula:
	//	"(" SL_COMMENT* left=StateFormula (right=Junction | right=Implication)? SL_COMMENT* ")" | left=(Negation | Atomic |
	//	Probability);
	public StateFormulaElements getStateFormulaAccess() {
		return pStateFormula;
	}
	
	public ParserRule getStateFormulaRule() {
		return getStateFormulaAccess().getRule();
	}

	//Negation returns StateExpression:
	//	"!" StateFormula;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Junction returns RightStateExpression hidden(WS, SL_COMMENT):
	//	Conjunction | Disjunction;
	public JunctionElements getJunctionAccess() {
		return pJunction;
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}

	//Conjunction returns RightStateExpression:
	//	"&" StateFormula ({Conjunction.left=current} "&" right=StateFormula)*;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Disjunction returns RightStateExpression:
	//	"|" StateFormula ({Disjunction.left=current} "|" right=StateFormula)*;
	public DisjunctionElements getDisjunctionAccess() {
		return pDisjunction;
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Implication returns RightStateExpression hidden(WS, SL_COMMENT):
	//	"=>" right=StateFormula;
	public ImplicationElements getImplicationAccess() {
		return pImplication;
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Probability returns StateExpression:
	//	"P" SL_COMMENT* {Probability} comparator=CompareProbability SL_COMMENT* "[" path=PathFormula "]";
	public ProbabilityElements getProbabilityAccess() {
		return pProbability;
	}
	
	public ParserRule getProbabilityRule() {
		return getProbabilityAccess().getRule();
	}

	//Atomic returns StateExpression:
	//	State | Label | Boolean;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//State:
	//	"State:" value=STRING;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Label:
	//	"Label:" value=STRING;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Boolean:
	//	value=BOOL;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	////###########################################################
	////#             Path Formular expressions                  #
	////###########################################################
	//PathFormula hidden(WS, SL_COMMENT):
	//	Next | Until | Future | Globally;
	public PathFormulaElements getPathFormulaAccess() {
		return pPathFormula;
	}
	
	public ParserRule getPathFormulaRule() {
		return getPathFormulaAccess().getRule();
	}

	//Until:
	//	left=StateFormula type=("U" | "W" | "R") bound=TimeBound? right=StateFormula;
	public UntilElements getUntilAccess() {
		return pUntil;
	}
	
	public ParserRule getUntilRule() {
		return getUntilAccess().getRule();
	}

	//Next:
	//	"X" bound=TimeBound? value=StateFormula;
	public NextElements getNextAccess() {
		return pNext;
	}
	
	public ParserRule getNextRule() {
		return getNextAccess().getRule();
	}

	//Future:
	//	"F" bound=TimeBound? value=StateFormula;
	public FutureElements getFutureAccess() {
		return pFuture;
	}
	
	public ParserRule getFutureRule() {
		return getFutureAccess().getRule();
	}

	//Globally:
	//	"G" bound=TimeBound? value=StateFormula;
	public GloballyElements getGloballyAccess() {
		return pGlobally;
	}
	
	public ParserRule getGloballyRule() {
		return getGloballyAccess().getRule();
	}

	//CompareProbability hidden(WS, SL_COMMENT):
	//	operator=COMPARATOR value=DOUBLE;
	public CompareProbabilityElements getCompareProbabilityAccess() {
		return pCompareProbability;
	}
	
	public ParserRule getCompareProbabilityRule() {
		return getCompareProbabilityAccess().getRule();
	}

	//TimeBound hidden(WS, SL_COMMENT):
	//	operator=(COMPARATOR | "=") value=DOUBLE | "[" from=DOUBLE operator="," to=DOUBLE "]";
	public TimeBoundElements getTimeBoundAccess() {
		return pTimeBound;
	}
	
	public ParserRule getTimeBoundRule() {
		return getTimeBoundAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
