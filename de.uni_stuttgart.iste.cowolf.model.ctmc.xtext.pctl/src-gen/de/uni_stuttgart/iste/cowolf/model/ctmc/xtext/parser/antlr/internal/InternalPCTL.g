/*
* generated by Xtext
*/
grammar InternalPCTL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services.PCTLGrammarAccess;

}

@parser::members {

 	private PCTLGrammarAccess grammarAccess;
 	
    public InternalPCTLParser(TokenStream input, PCTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Start";	
   	}
   	
   	@Override
   	protected PCTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	 iv_ruleStart=ruleStart 
	 { $current=$iv_ruleStart.current; } 
	 EOF 
;

// Rule Start
ruleStart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStartAccess().getStartCommentedRuleParserRuleCall_0_0()); 
	    }
		lv_start_0_0=ruleCommentedRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_0_0, 
        		"CommentedRule");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStartAccess().getStartStartParserRuleCall_1_0()); 
	    }
		lv_start_1_0=ruleStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_1_0, 
        		"Start");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCommentedRule
entryRuleCommentedRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentedRuleRule()); }
	 iv_ruleCommentedRule=ruleCommentedRule 
	 { $current=$iv_ruleCommentedRule.current; } 
	 EOF 
;

// Rule CommentedRule
ruleCommentedRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_comment_0_0=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getCommentedRuleAccess().getCommentSL_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentedRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"SL_COMMENT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCommentedRuleAccess().getRulePctlParserRuleCall_1_0()); 
	    }
		lv_rule_1_0=rulePctl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommentedRuleRule());
	        }
       		set(
       			$current, 
       			"rule",
        		lv_rule_1_0, 
        		"Pctl");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePctl
entryRulePctl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPctlRule()); }
	 iv_rulePctl=rulePctl 
	 { $current=$iv_rulePctl.current; } 
	 EOF 
;

// Rule Pctl
rulePctl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPctlAccess().getStateFormulaParserRuleCall_0()); 
    }
    this_StateFormula_0=ruleStateFormula
    { 
        $current = $this_StateFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPctlAccess().getSteadyStateParserRuleCall_1()); 
    }
    this_SteadyState_1=ruleSteadyState
    { 
        $current = $this_SteadyState_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPctlAccess().getQuantifiedProbabilityParserRuleCall_2()); 
    }
    this_QuantifiedProbability_2=ruleQuantifiedProbability
    { 
        $current = $this_QuantifiedProbability_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='State:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Label:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLabelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getStateParserRuleCall_0()); 
    }
    this_State_0=ruleState
    { 
        $current = $this_State_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getLabelParserRuleCall_1()); 
    }
    this_Label_1=ruleLabel
    { 
        $current = $this_Label_1.current; 
        afterParserOrEnumRuleCall();
    }

    |this_BOOL_2=RULE_BOOL
    { 
    newLeafNode(this_BOOL_2, grammarAccess.getAtomicAccess().getBOOLTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationAccess().getExclamationMarkKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNegationAccess().getStateFormulaParserRuleCall_1()); 
    }
    this_StateFormula_1=ruleStateFormula
    { 
        $current = $this_StateFormula_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJunction
entryRuleJunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJunctionRule()); }
	 iv_ruleJunction=ruleJunction 
	 { $current=$iv_ruleJunction.current; } 
	 EOF 
;

// Rule Junction
ruleJunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJunctionAccess().getConjunctionParserRuleCall_0()); 
    }
    this_Conjunction_0=ruleConjunction
    { 
        $current = $this_Conjunction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJunctionAccess().getDisjunctionParserRuleCall_1()); 
    }
    this_Disjunction_1=ruleDisjunction
    { 
        $current = $this_Disjunction_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConjunctionAccess().getAmpersandKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getConjunctionAccess().getStateFormulaParserRuleCall_1()); 
    }
    this_StateFormula_1=ruleStateFormula
    { 
        $current = $this_StateFormula_1.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConjunctionAccess().getConjunctionLeftAction_2_0(),
            $current);
    }
)	otherlv_3='&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConjunctionAccess().getAmpersandKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); 
	    }
		lv_right_4_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDisjunctionRule()); }
	 iv_ruleDisjunction=ruleDisjunction 
	 { $current=$iv_ruleDisjunction.current; } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getDisjunctionAccess().getStateFormulaParserRuleCall_1()); 
    }
    this_StateFormula_1=ruleStateFormula
    { 
        $current = $this_StateFormula_1.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_2_0(),
            $current);
    }
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getRightStateFormulaParserRuleCall_2_2_0()); 
	    }
		lv_right_4_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStateFormula
entryRuleStateFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateFormulaRule()); }
	 iv_ruleStateFormula=ruleStateFormula 
	 { $current=$iv_ruleStateFormula.current; } 
	 EOF 
;

// Rule StateFormula
ruleStateFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateFormulaAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateFormulaAccess().getLeftStateFormulaParserRuleCall_0_1_0()); 
	    }
		lv_left_1_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateFormulaRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStateFormulaAccess().getRightJunctionParserRuleCall_0_2_0_0()); 
	    }
		lv_right_2_0=ruleJunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateFormulaRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Junction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateFormulaAccess().getRightImplicationParserRuleCall_0_2_1_0()); 
	    }
		lv_right_3_0=ruleImplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateFormulaRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Implication");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateFormulaAccess().getRightParenthesisKeyword_0_3());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStateFormulaAccess().getNegationParserRuleCall_1()); 
    }
    this_Negation_5=ruleNegation
    { 
        $current = $this_Negation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFormulaAccess().getAtomicParserRuleCall_2()); 
    }
    this_Atomic_6=ruleAtomic
    { 
        $current = $this_Atomic_6.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateFormulaAccess().getLeftProbabilityParserRuleCall_3_0()); 
	    }
		lv_left_7_0=ruleProbability		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateFormulaRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_7_0, 
        		"Probability");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePathFormula
entryRulePathFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathFormulaRule()); }
	 iv_rulePathFormula=rulePathFormula 
	 { $current=$iv_rulePathFormula.current; } 
	 EOF 
;

// Rule PathFormula
rulePathFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getNextParserRuleCall_0()); 
    }
    this_Next_0=ruleNext
    { 
        $current = $this_Next_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getUntilParserRuleCall_1()); 
    }
    this_Until_1=ruleUntil
    { 
        $current = $this_Until_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getFutureParserRuleCall_2()); 
    }
    this_Future_2=ruleFuture
    { 
        $current = $this_Future_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getGloballyParserRuleCall_3()); 
    }
    this_Globally_3=ruleGlobally
    { 
        $current = $this_Globally_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSteadyState
entryRuleSteadyState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSteadyStateRule()); }
	 iv_ruleSteadyState=ruleSteadyState 
	 { $current=$iv_ruleSteadyState.current; } 
	 EOF 
;

// Rule SteadyState
ruleSteadyState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='S' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSteadyStateAccess().getSKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getSteadyStateAccess().getCompareProbabilityParserRuleCall_1_0()); 
    }
ruleCompareProbability
    { 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_2='=?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSteadyStateAccess().getEqualsSignQuestionMarkKeyword_1_1());
    }
)	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSteadyStateAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getSteadyStateAccess().getStateFormulaParserRuleCall_3()); 
    }
    this_StateFormula_4=ruleStateFormula
    { 
        $current = $this_StateFormula_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSteadyStateAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleQuantifiedProbability
entryRuleQuantifiedProbability returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedProbabilityRule()); }
	 iv_ruleQuantifiedProbability=ruleQuantifiedProbability 
	 { $current=$iv_ruleQuantifiedProbability.current; } 
	 EOF 
;

// Rule QuantifiedProbability
ruleQuantifiedProbability returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='P' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuantifiedProbabilityAccess().getPKeyword_0_0());
    }
	otherlv_1='=?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantifiedProbabilityAccess().getEqualsSignQuestionMarkKeyword_0_1());
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantifiedProbabilityAccess().getLeftSquareBracketKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getQuantifiedProbabilityAccess().getPathFormulaParserRuleCall_2()); 
    }
    this_PathFormula_3=rulePathFormula
    { 
        $current = $this_PathFormula_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantifiedProbabilityAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleProbability
entryRuleProbability returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityRule()); }
	 iv_ruleProbability=ruleProbability 
	 { $current=$iv_ruleProbability.current; } 
	 EOF 
;

// Rule Probability
ruleProbability returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='P' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProbabilityAccess().getPKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getProbabilityAccess().getCompareProbabilityParserRuleCall_1()); 
    }
ruleCompareProbability
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProbabilityAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getProbabilityAccess().getPathFormulaParserRuleCall_3()); 
    }
    this_PathFormula_3=rulePathFormula
    { 
        $current = $this_PathFormula_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProbabilityAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleUntil
entryRuleUntil returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUntilRule()); }
	 iv_ruleUntil=ruleUntil 
	 { $current=$iv_ruleUntil.current; } 
	 EOF 
;

// Rule Until
ruleUntil returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUntilAccess().getLeftStateFormulaParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='U' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUntilAccess().getUKeyword_1_0());
    }

    |	otherlv_2='W' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUntilAccess().getWKeyword_1_1());
    }

    |	otherlv_3='R' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUntilAccess().getRKeyword_1_2());
    }
)(
    { 
        newCompositeNode(grammarAccess.getUntilAccess().getTimeBoundParserRuleCall_2()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUntilAccess().getRightStateFormulaParserRuleCall_3_0()); 
	    }
		lv_right_5_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNext
entryRuleNext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextRule()); }
	 iv_ruleNext=ruleNext 
	 { $current=$iv_ruleNext.current; } 
	 EOF 
;

// Rule Next
ruleNext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='X' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNextAccess().getXKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getNextAccess().getTimeBoundParserRuleCall_1()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNextAccess().getRightStateFormulaParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFuture
entryRuleFuture returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFutureRule()); }
	 iv_ruleFuture=ruleFuture 
	 { $current=$iv_ruleFuture.current; } 
	 EOF 
;

// Rule Future
ruleFuture returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='F' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFutureAccess().getFKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFutureAccess().getTimeBoundParserRuleCall_1()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFutureAccess().getRightStateFormulaParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFutureRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGlobally
entryRuleGlobally returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGloballyRule()); }
	 iv_ruleGlobally=ruleGlobally 
	 { $current=$iv_ruleGlobally.current; } 
	 EOF 
;

// Rule Globally
ruleGlobally returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='G' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGloballyAccess().getGKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getGloballyAccess().getTimeBoundParserRuleCall_1()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGloballyAccess().getRightStateFormulaParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGloballyRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImplication
entryRuleImplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicationRule()); }
	 iv_ruleImplication=ruleImplication 
	 { $current=$iv_ruleImplication.current; } 
	 EOF 
;

// Rule Implication
ruleImplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImplicationAccess().getEqualsSignGreaterThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplicationAccess().getRightStateFormulaParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompareProbability
entryRuleCompareProbability returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareProbabilityRule()); } 
	 iv_ruleCompareProbability=ruleCompareProbability 
	 { $current=$iv_ruleCompareProbability.current.getText(); }  
	 EOF 
;

// Rule CompareProbability
ruleCompareProbability returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareProbabilityAccess().getGreaterThanSignKeyword_0_0_0()); 
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareProbabilityAccess().getEqualsSignKeyword_0_0_1()); 
    }
)?)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareProbabilityAccess().getLessThanSignKeyword_0_1_0()); 
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareProbabilityAccess().getEqualsSignKeyword_0_1_1()); 
    }
)?))    this_DECIMAL_4=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_4);
    }

    { 
    newLeafNode(this_DECIMAL_4, grammarAccess.getCompareProbabilityAccess().getDECIMALTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleTimeBound
entryRuleTimeBound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeBoundRule()); } 
	 iv_ruleTimeBound=ruleTimeBound 
	 { $current=$iv_ruleTimeBound.current.getText(); }  
	 EOF 
;

// Rule TimeBound
ruleTimeBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getGreaterThanSignKeyword_0_0_0_0()); 
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getEqualsSignKeyword_0_0_0_1()); 
    }
)?)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getLessThanSignKeyword_0_0_1_0()); 
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getEqualsSignKeyword_0_0_1_1()); 
    }
)?)
    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getEqualsSignKeyword_0_0_2()); 
    }
)    this_DECIMAL_5=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
    newLeafNode(this_DECIMAL_5, grammarAccess.getTimeBoundAccess().getDECIMALTerminalRuleCall_0_1()); 
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getLeftSquareBracketKeyword_1_0()); 
    }
    this_DECIMAL_7=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_7);
    }

    { 
    newLeafNode(this_DECIMAL_7, grammarAccess.getTimeBoundAccess().getDECIMALTerminalRuleCall_1_1()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getCommaKeyword_1_2()); 
    }
    this_DECIMAL_9=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_9);
    }

    { 
    newLeafNode(this_DECIMAL_9, grammarAccess.getTimeBoundAccess().getDECIMALTerminalRuleCall_1_3()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getRightSquareBracketKeyword_1_4()); 
    }
))
    ;





RULE_BOOL : ('true'|'false');

RULE_DECIMAL : (RULE_INT ('.' RULE_INT)?|'.' RULE_INT);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


