/*
* generated by Xtext
*/
grammar InternalPCTL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_stuttgart.iste.cowolf.model.ctmc.xtext.services.PCTLGrammarAccess;

}

@parser::members {

 	private PCTLGrammarAccess grammarAccess;
 	
    public InternalPCTLParser(TokenStream input, PCTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Start";	
   	}
   	
   	@Override
   	protected PCTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	 iv_ruleStart=ruleStart 
	 { $current=$iv_ruleStart.current; } 
	 EOF 
;

// Rule Start
ruleStart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStartAccess().getStartSParserRuleCall_0_0()); 
	    }
		lv_start_0_0=ruleS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_0_0, 
        		"S");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getStartAccess().getP1ParserRuleCall_1()); 
    }
    this_P1_1=ruleP1
    { 
        $current = $this_P1_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateAccess().getLeftParenthesisKeyword_0_0());
    }
	otherlv_1='State:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getStateKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateAccess().getRightParenthesisKeyword_0_3());
    }
)
    |(	otherlv_4='State:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAccess().getStateKeyword_1_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLeftParenthesisKeyword_0_0());
    }
	otherlv_1='Label:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelAccess().getLabelKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLabelAccess().getRightParenthesisKeyword_0_3());
    }
)
    |(	otherlv_4='Label:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLabelAccess().getLabelKeyword_1_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleStateOrLabel
entryRuleStateOrLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateOrLabelRule()); }
	 iv_ruleStateOrLabel=ruleStateOrLabel 
	 { $current=$iv_ruleStateOrLabel.current; } 
	 EOF 
;

// Rule StateOrLabel
ruleStateOrLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateOrLabelAccess().getStateParserRuleCall_0()); 
    }
    this_State_0=ruleState
    { 
        $current = $this_State_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateOrLabelAccess().getLabelParserRuleCall_1()); 
    }
    this_Label_1=ruleLabel
    { 
        $current = $this_Label_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleS
entryRuleS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSRule()); }
	 iv_ruleS=ruleS 
	 { $current=$iv_ruleS.current; } 
	 EOF 
;

// Rule S
ruleS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='S' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSAccess().getSKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getSAccess().getCompareParserRuleCall_1()); 
    }
ruleCompare
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getSAccess().getStateOrLabelParserRuleCall_3()); 
    }
    this_StateOrLabel_3=ruleStateOrLabel
    { 
        $current = $this_StateOrLabel_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleP1
entryRuleP1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getP1Rule()); }
	 iv_ruleP1=ruleP1 
	 { $current=$iv_ruleP1.current; } 
	 EOF 
;

// Rule P1
ruleP1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='P' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getP1Access().getPKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getP1Access().getCompareParserRuleCall_1()); 
    }
ruleCompare
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getP1Access().getLeftSquareBracketKeyword_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getP1Access().getPParserRuleCall_3_0()); 
    }
    this_P_3=ruleP
    { 
        $current = $this_P_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getP1Access().getSParserRuleCall_3_1()); 
    }
    this_S_4=ruleS
    { 
        $current = $this_S_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getP1Access().getFParserRuleCall_3_2()); 
    }
    this_F_5=ruleF
    { 
        $current = $this_F_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getP1Access().getUParserRuleCall_3_3()); 
    }
    this_U_6=ruleU
    { 
        $current = $this_U_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getP1Access().getGParserRuleCall_3_4()); 
    }
    this_G_7=ruleG
    { 
        $current = $this_G_7.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getP1Access().getXParserRuleCall_3_5_0()); 
    }
ruleX
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getP1Access().getStateOrLabelParserRuleCall_3_5_1()); 
    }
    this_StateOrLabel_9=ruleStateOrLabel
    { 
        $current = $this_StateOrLabel_9.current; 
        afterParserOrEnumRuleCall();
    }
))	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getP1Access().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleP
entryRuleP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRule()); }
	 iv_ruleP=ruleP 
	 { $current=$iv_ruleP.current; } 
	 EOF 
;

// Rule P
ruleP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='P' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPAccess().getPKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getPAccess().getCompareWithoutUnknownParserRuleCall_1()); 
    }
ruleCompareWithoutUnknown
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPAccess().getLeftSquareBracketKeyword_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getPAccess().getPParserRuleCall_3_0()); 
    }
    this_P_3=ruleP
    { 
        $current = $this_P_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPAccess().getSParserRuleCall_3_1()); 
    }
    this_S_4=ruleS
    { 
        $current = $this_S_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPAccess().getFParserRuleCall_3_2()); 
    }
    this_F_5=ruleF
    { 
        $current = $this_F_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPAccess().getUParserRuleCall_3_3()); 
    }
    this_U_6=ruleU
    { 
        $current = $this_U_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPAccess().getGParserRuleCall_3_4()); 
    }
    this_G_7=ruleG
    { 
        $current = $this_G_7.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getPAccess().getXParserRuleCall_3_5_0()); 
    }
ruleX
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPAccess().getStateOrLabelParserRuleCall_3_5_1()); 
    }
    this_StateOrLabel_9=ruleStateOrLabel
    { 
        $current = $this_StateOrLabel_9.current; 
        afterParserOrEnumRuleCall();
    }
))	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleX
entryRuleX returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getXRule()); } 
	 iv_ruleX=ruleX 
	 { $current=$iv_ruleX.current.getText(); }  
	 EOF 
;

// Rule X
ruleX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXAccess().getXKeyword()); 
    }
)*
    ;





// Entry rule entryRuleF
entryRuleF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFRule()); }
	 iv_ruleF=ruleF 
	 { $current=$iv_ruleF.current; } 
	 EOF 
;

// Rule F
ruleF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='F' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFAccess().getFKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFAccess().getTimeBoundParserRuleCall_1_0()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFAccess().getXParserRuleCall_1_1()); 
    }
ruleX
    { 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFAccess().getRIGHTStateOrLabelParserRuleCall_2_0()); 
	    }
		lv_RIGHT_3_0=ruleStateOrLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFRule());
	        }
       		set(
       			$current, 
       			"RIGHT",
        		lv_RIGHT_3_0, 
        		"StateOrLabel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleG
entryRuleG returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGRule()); }
	 iv_ruleG=ruleG 
	 { $current=$iv_ruleG.current; } 
	 EOF 
;

// Rule G
ruleG returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='G' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGAccess().getGKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getGAccess().getTimeBoundParserRuleCall_1_0()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getGAccess().getXParserRuleCall_1_1()); 
    }
ruleX
    { 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGAccess().getLEFTStateOrLabelParserRuleCall_3_0()); 
	    }
		lv_LEFT_4_0=ruleStateOrLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRule());
	        }
       		set(
       			$current, 
       			"LEFT",
        		lv_LEFT_4_0, 
        		"StateOrLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGAccess().getEqualsSignGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGAccess().getRIGHTPParserRuleCall_5_0()); 
	    }
		lv_RIGHT_6_0=ruleP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRule());
	        }
       		set(
       			$current, 
       			"RIGHT",
        		lv_RIGHT_6_0, 
        		"P");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleU
entryRuleU returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getURule()); }
	 iv_ruleU=ruleU 
	 { $current=$iv_ruleU.current; } 
	 EOF 
;

// Rule U
ruleU returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUAccess().getLEFTStateOrLabelParserRuleCall_0_0()); 
	    }
		lv_LEFT_0_0=ruleStateOrLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getURule());
	        }
       		set(
       			$current, 
       			"LEFT",
        		lv_LEFT_0_0, 
        		"StateOrLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='U' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUAccess().getUKeyword_1_0());
    }

    |	otherlv_2='W' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUAccess().getWKeyword_1_1());
    }

    |	otherlv_3='R' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUAccess().getRKeyword_1_2());
    }
)(
    { 
        newCompositeNode(grammarAccess.getUAccess().getTimeBoundParserRuleCall_2_0()); 
    }
ruleTimeBound
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getUAccess().getXParserRuleCall_2_1()); 
    }
ruleX
    { 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUAccess().getRIGHTStateOrLabelParserRuleCall_3_0()); 
	    }
		lv_RIGHT_6_0=ruleStateOrLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getURule());
	        }
       		set(
       			$current, 
       			"RIGHT",
        		lv_RIGHT_6_0, 
        		"StateOrLabel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompare
entryRuleCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareRule()); } 
	 iv_ruleCompare=ruleCompare 
	 { $current=$iv_ruleCompare.current.getText(); }  
	 EOF 
;

// Rule Compare
ruleCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareAccess().getCompareWithoutUnknownParserRuleCall_0()); 
    }
    this_CompareWithoutUnknown_0=ruleCompareWithoutUnknown    {
		$current.merge(this_CompareWithoutUnknown_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='=?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareAccess().getEqualsSignQuestionMarkKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleCompareWithoutUnknown
entryRuleCompareWithoutUnknown returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareWithoutUnknownRule()); } 
	 iv_ruleCompareWithoutUnknown=ruleCompareWithoutUnknown 
	 { $current=$iv_ruleCompareWithoutUnknown.current.getText(); }  
	 EOF 
;

// Rule CompareWithoutUnknown
ruleCompareWithoutUnknown returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareWithoutUnknownAccess().getGreaterThanSignKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompareWithoutUnknownAccess().getDECIMALParserRuleCall_0_1()); 
    }
    this_DECIMAL_1=ruleDECIMAL    {
		$current.merge(this_DECIMAL_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareWithoutUnknownAccess().getLessThanSignKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompareWithoutUnknownAccess().getDECIMALParserRuleCall_1_1()); 
    }
    this_DECIMAL_3=ruleDECIMAL    {
		$current.merge(this_DECIMAL_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareWithoutUnknownAccess().getGreaterThanSignEqualsSignKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompareWithoutUnknownAccess().getDECIMALParserRuleCall_2_1()); 
    }
    this_DECIMAL_5=ruleDECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareWithoutUnknownAccess().getLessThanSignEqualsSignKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompareWithoutUnknownAccess().getDECIMALParserRuleCall_3_1()); 
    }
    this_DECIMAL_7=ruleDECIMAL    {
		$current.merge(this_DECIMAL_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleTimeBound
entryRuleTimeBound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeBoundRule()); } 
	 iv_ruleTimeBound=ruleTimeBound 
	 { $current=$iv_ruleTimeBound.current.getText(); }  
	 EOF 
;

// Rule TimeBound
ruleTimeBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getGreaterThanSignEqualsSignKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTimeBoundAccess().getDECIMALParserRuleCall_0_1()); 
    }
    this_DECIMAL_1=ruleDECIMAL    {
		$current.merge(this_DECIMAL_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getLessThanSignEqualsSignKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTimeBoundAccess().getDECIMALParserRuleCall_1_1()); 
    }
    this_DECIMAL_3=ruleDECIMAL    {
		$current.merge(this_DECIMAL_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getEqualsSignKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTimeBoundAccess().getDECIMALParserRuleCall_2_1()); 
    }
    this_DECIMAL_5=ruleDECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getLeftSquareBracketKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTimeBoundAccess().getDECIMALParserRuleCall_3_1()); 
    }
    this_DECIMAL_7=ruleDECIMAL    {
		$current.merge(this_DECIMAL_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getCommaKeyword_3_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getTimeBoundAccess().getDECIMALParserRuleCall_3_3()); 
    }
    this_DECIMAL_9=ruleDECIMAL    {
		$current.merge(this_DECIMAL_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeBoundAccess().getRightSquareBracketKeyword_3_4()); 
    }
))?
    ;





// Entry rule entryRuleDECIMAL
entryRuleDECIMAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDECIMALRule()); } 
	 iv_ruleDECIMAL=ruleDECIMAL 
	 { $current=$iv_ruleDECIMAL.current.getText(); }  
	 EOF 
;

// Rule DECIMAL
ruleDECIMAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDECIMALAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


